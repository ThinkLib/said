@using Said.Common;
@model Said.Models.Blog
@{
    ViewBag.Title = "编辑Blog - " + Model.BTitle;
    Layout = "~/Areas/Back/Views/Shared/_LayoutBack.cshtml";
    var ClassifysList = ViewData["ClassifysList"] as IList<Said.Models.Classify>;
    var TagList = ViewData["TagList"] as IList<Said.Models.Tag>;
    var BlogFiles = ViewData["BlogFiles"] as IList<Said.Models.Blog>;
    var BlogTags = ViewData["BlogTags"] as IList<Said.Models.BlogTags>;
}
<div id="said-help" class="said-mask-content said-watermark">
    <ul>
        <li>英文和中文中间请在英文<span class="keywords">两侧使用空格</span>，排版更漂亮</li>
        <li>图片请上传到本站再使用，<span class="keywords">不要使用外链</span>的图片</li>
        <li>&lt;li&gt;标签里再放&lt;code&gt;片段的时候，请在&lt;li&gt;下面使用一个回车（空行）</li>
    </ul>
</div>
<ol class="breadcrumb">
    <li><a href="/Back">Home</a></li>
    <li>文章管理</li>
    <li class="active">编辑Blog - 《@Model.BTitle》</li>
    <li class="g-help"><a href="javascript:;" id="said-help-btn" title="帮助"><i class="fa fa-question-circle"></i></a></li>
</ol>
<div class="main-context">
    <div class="modal fade" ms-controller="modal" id="blog-modal">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal"><span aria-hidden="true">&times;</span><span class="sr-only">Close</span></button>
                    <h4 class="modal-title">{{title}}</h4>
                </div>
                <div class="modal-body">{{body}}</div>
            </div>
        </div>
    </div>
    @using (Html.BeginForm("AddBlog", "Blog", FormMethod.Post, new Dictionary<string, object>(){
    { "spellcheck", "spellcheck" },
    { "name", "saidForm" },
    { "novalidate", "novalidate" },
    { "ms-controller", "blog" },
    { "OnSubmit", "return false;" }}))
    {
        <div class="said-article">
            <div class="said-title-con">
                <input name="bTitle" id="bTitle" value="" ms-duplex="bTitle" class="said-title" ms-class="said-error:!bTitle.length" autocomplete="off" placeholder="文章标题" />
                @Html.HiddenFor(m => m.BTitle, new Dictionary<string, object>() {
                    { "id", "bTitle-hidden" },
                    { "ms-dom", "bTitle-h" }
                })
            </div>
            <div class="said-context-content">
                <textarea name="BContext" id="BContext" ms-duplex="bContext" class="said-context said-watermark"></textarea>
                @Html.HiddenFor(m => m.BContext, new Dictionary<string, object>() {
                    { "id", "bContext-hidden" },
                    { "ms-dom", "bContext-h" },
                    { "placeholder", "请使用Markdown编写正文" }
                })
            </div>
            <button class="btn btn-lg said-priview center-block" ms-click="preview()" type="button">预览</button>
        </div>
        <div class="row said-view-container">
            <div class="col-md-6">
                <div class="panel panel-default relative-container">
                    <div class="panel-heading">附加信息</div>
                    <div class="panel-body">
                        <div class="input-group" ms-controller="tagController">
                            <span class="input-group-addon">标签</span>
                            <input class="tag-input" ms-widget="groupInput" placeholder="标签，支持[tab]分隔" autocomplete="off" />
                        </div>
                        <div class="input-group" ms-class="has-error:!classifyId" ms-controller="classifyController">
                            <span class="input-group-addon">分类</span>
                            @Html.TextBoxFor(m => m.Classify.CName, new Dictionary<string, object>() {
                                { "class", "classify-input" },
                                { "ms-duplex", "classify" },
                                { "placeholder", "分类名称" },
                                { "autocomplete", "off" },
                                { "ms-widget", "groupInput" }
                            })
                        </div>
                        <div class="form-group">
                            <label>简述</label>
                            <textarea name="BSummary" id="BSummary" ms-duplex="bSummary" class="form-control" style="height:142px" ms-class="!bSummary" placeholder="简介，支持多行"></textarea>
                            @Html.HiddenFor(m => m.BSummary, new Dictionary<string, object>() {
                                                { "id", "bSummary-hidden" },
                                                { "ms-dom", "bSummary-h" }
                                            })
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-md-6">
                <div class="panel panel-default">
                    <div class="panel-heading ">可选信息</div>
                    <div class="panel-body">
                        <div class="input-group" ms-class="has-error:checkFile">
                            <span class="input-group-addon">文件</span>
                            <input name="BName" id="BName" value="" ms-duplex="bName" class="form-control" ms-input="checkFileName(this,bName)" data-tooltip="tooltip" data-placement="top" data-title="该文件名已经存在" data-animation="false" placeholder="文章发布的（文件）名称" />
                            @Html.HiddenFor(m => m.BName, new Dictionary<string, object>() {
                                                { "id", "bName-hidden" },
                                                { "ms-dom", "bName-h" }
                                            })
                        </div>
                        <div class="form-group">
                            <label>JavaScript</label>
                            <textarea name="BScript" id="BScript" value="" ms-duplex="bScript" class="form-control" placeholder="自定义JavaScript"></textarea>
                            @Html.HiddenFor(m => m.BScript, new Dictionary<string, object>() {
                                        { "id", "bScript-hidden" },
                                        { "ms-dom", "bScript-h" }
                                    })
                        </div>
                        <div class="form-group">
                            <label>CSS</label>
                            <textarea name="BCSS" id="BCSS" value="" ms-duplex="bCSS" class="form-control" placeholder="自定义CSS"></textarea>
                            @Html.HiddenFor(m => m.BCSS, new Dictionary<string, object>() {
                                        { "id", "bCSS-hidden" },
                                        { "ms-dom", "bCSS-h" }
                                    })
                        </div>
                        <div class="checkbox said-checkbox">
                            <label>
                                <input type="checkbox" name="BReprint" id="BReprint" value="" ms-duplex-checked="bReprint" />是否转载
                                @Html.HiddenFor(m => m.BReprint, new Dictionary<string, object>() {
                                        { "id", "bReprint-hidden" },
                                        { "ms-dom", "bReprint-h" }
                                    })
                            </label>
                            <label>
                                <input type="checkbox" name="BIsTop" id="BIsTop" value="" ms-duplex-checked="bIsTop" />是否置顶
                                @Html.HiddenFor(m => m.BIsTop, new Dictionary<string, object>() {
                                        { "id", "bIsTop-hidden" },
                                        { "ms-dom", "bIsTop-h" }
                                    })
                            </label>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="submit-container">
            <button class="btn btn-lg said-submit center-block" ms-class="submit-lock:submitState" type="button" ms-click="save()">发布</button>
        </div>
    }
</div>

@section Css{
    @Styles.Render("~/static/back/css/said.add")
}
@section FootJs{
    @Scripts.Render("~/static/back/js/blog.edit")
    <script type="text/javascript">
        var blogId = '@Model.BlogId',
            _classifydbData = {
                data: '@Model.ClassifyId',
                name: '@Model.Classify.CName'
            };
        var Action = {
            summaryImg: '@ConfigInfo.SourceSaidPath',
            blogImageType: '@((int)Said.Models.ImageType.Blog)',
            uploadImg: '@Url.Action("Upload", "Image")',
            deleteImg: '@Url.Action("DeleteImage","Source")',
            form: '@Url.Action("Edit", "Blog")',
            summaryImg: '@ConfigInfo.SourceBlogPath',
            //预览
            preview: '@Url.Action("Preview","Blog")'
        },
        DataCenter = {
            tags: [],
            classifyDatas: [],
            files: [],
            blogTags: []
        };

        @if (ClassifysList != null)
        {
            foreach (var item in ClassifysList)
            {
                Write(new HtmlString(string.Format("DataCenter.classifyDatas.push({{query:'{0}',name:'{0}',data:'{1}'}});", item.CName,item.ClassifyId)));
            }
        }
        @if (TagList != null)
        {
            foreach (var item in TagList)
            {
                Write(new HtmlString(string.Format("DataCenter.tags.push({{query:'{0}',name:'{0}',data:'{1}'}});", item.TagName,item.TagId)));
            }
        }
        @if (BlogFiles != null)
        {
            foreach (var item in BlogFiles)
            {
                Write(new HtmlString(string.Format("DataCenter.files.push('{0}');", item.BName)));
            }
        }

        @if (BlogTags != null)
                {
                    foreach (var item in BlogTags)
                    {
                        Write(new HtmlString(string.Format("DataCenter.blogTags.push({{query:'{0}',name:'{0}',data:'{1}'}});", item.Tag.TagName,item.Tag.TagId)));
                    }
                }

        if (DataCenter.files.length)
            DataCenter.files = DataCenter.files.map(function (item) { return item.toLowerCase() });
        require(['blog.edit'], function (view) {
            view(blogId, _classifydbData, Action, DataCenter);
        });

    </script>
}
