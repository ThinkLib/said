@using Said.Common;
@model Said.Models.Blog
@{
    Layout = "~/Areas/Back/Views/Shared/_LayoutBack.cshtml";
    var ClassifysList = ViewData["ClassifysList"] as IList<Said.Models.Classify>;
    var TagList = ViewData["TagList"] as IList<Said.Models.Tag>;
    var BlogFiles = ViewData["BlogFiles"] as IList<Said.Models.Blog>;
}
<div class="page-header">
    <h2>添加文章&nbsp;&nbsp;<small>&gt;添加一篇文章</small></h2>
</div>
<ol class="breadcrumb">
    <li><a href="#">Home</a></li>
    <li><a href="#">文章管理</a></li>
    <li class="active">添加文章</li>
</ol>
<div class="main-context">
    <div class="modal fade" ms-controller="modal" id="blog-modal">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal"><span aria-hidden="true">&times;</span><span class="sr-only">Close</span></button>
                    <h4 class="modal-title">{{title}}</h4>
                </div>
                <div class="modal-body">{{body}}</div>
            </div>
        </div>
    </div>
    @using (Html.BeginForm("AddBlog", "Blog", FormMethod.Post, new Dictionary<string, object>(){
    { "spellcheck", "spellcheck" },
    { "name", "saidForm" },
    { "novalidate", "novalidate" },
    { "ms-controller", "blog" },
    { "OnSubmit", "return false;" }}))
    {
        <div class="said-article">
            <div class="said-title-con">
                @Html.TextBoxFor(m => m.BTitle, new Dictionary<string, object>() {
                            { "ms-duplex", "bTitle" },
                            { "class", "said-title" },
                            { "ms-class", "said-error:!bTitle.length" },
                            { "ms-change", "saveTolocalStorage('bTitle',bTitle)" },
                            { "autocomplete", "off" },
                            { "placeholder", "文章标题" },
                            { "required", "required" }
            })
            </div>
            <div class="said-context-content">
                @Html.TextAreaFor(m => m.BContext, new Dictionary<string, object>() {
                            { "class", "said-context" },
                            { "ms-duplex", "bContext" },
                            { "ms-change", "saveTolocalStorage('bContext',bContext)" },
                            { "required", "required" }
                })
            </div>
            <button class="btn btn-lg said-priview center-block" ms-click="preview()" type="button">预览</button>
        </div>
        @*ms-controller="defaultsDatas"*@
        <div class="row said-view-container">
            <div class="col-md-6">
                <div class="panel panel-default relative-container">
                    <div class="panel-heading">附加信息</div>
                    <div class="panel-body">
                        <div class="input-group" ms-controller="tagController">
                            <span class="input-group-addon">标签</span>
                            <input class="tag-input" ms-widget="groupInput" placeholder="标签，支持[tab]分隔" autocomplete="off" />
                        </div>
                        <div class="input-group" ms-class="has-error:!classifyId" ms-controller="classifyController">
                            <span class="input-group-addon">分类</span>
                            @Html.TextBoxFor(m => m.Classify.CName, new Dictionary<string, object>() {
                                { "class", "classify-input" },
                                { "ms-duplex", "classify" },
                                { "placeholder", "分类名称" },
                                { "autocomplete", "off" },
                                { "ms-widget", "groupInput" }
                            })
                        </div>
                        <div class="form-group">
                            <label>简述</label>
                            @Html.TextAreaFor(m => m.BSummary, new Dictionary<string, object>() {
                            { "class", "form-control" },
                            { "autocomplete", "off" },
                           { "style","height:142px"},
                            { "ms-duplex", "bSummary" },
                            { "ms-class", "!bSummary" },
                            { "placeholder", "简介，支持多行" },
                            { "ms-change", "saveTolocalStorage('bSummary',bSummary)" }})
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-md-6">
                <div class="panel panel-default">
                    <div class="panel-heading ">可选信息</div>
                    <div class="panel-body">
                        <div class="input-group" ms-class="has-error:checkFile">
                            <span class="input-group-addon">文件</span>
                            @Html.TextBoxFor(m => m.BName, new Dictionary<string, object>() {
                                { "class", "form-control" },
                                { "ms-duplex", "bName" },
                                { "ms-input", "checkFileName(this,bName)" },
                                //{ "ms-change", "saveTolocalStorage('bName',bName)" },
                                { "data-toggle", "tooltip" },
                                { "data-placement", "top" },
                                { "data-title", "该文件名已经存在" },
                                { "data-animation", "false" },
                                { "placeholder", "文章发布的（文件）名称" }
                            })
                        </div>
                        <div class="form-group">
                            <label>JavaScript</label>
                            @Html.TextAreaFor(m => m.BScript, new Dictionary<string, object>() {
                                { "class", "form-control" },
                                { "placeholder", "自定义JavaScript" },
                                { "ms-change", "saveTolocalStorage('bScript',bScript)" },
                                { "ms-duplex", "bScript" }
                            })
                        </div>
                        <div class="form-group">
                            <label>CSS</label>
                            @Html.TextAreaFor(m => m.BCSS, new Dictionary<string, object>() {
                                { "class", "form-control" },
                                { "placeholder", "自定义CSS" },
                                { "ms-change", "saveTolocalStorage('bCSS',bCSS)" },
                                { "ms-duplex", "bCSS" }
                            })
                        </div>
                        <div class="checkbox said-checkbox">
                            <label>
                                @Html.CheckBoxFor(m => m.BReprint, new Dictionary<string, object>() {
                                { "ms-duplex-checked", "bReprint" },
                                { "ms-change", "saveTolocalStorage('bReprint',bReprint)" }
                            })是否转载
                            </label>
                            <label>
                                @Html.CheckBoxFor(m => m.BIsTop, new Dictionary<string, object>() {
                                { "ms-duplex-checked", "bIsTop" },
                                { "ms-change", "saveTolocalStorage('bIsTop',bIsTop)" }
                            })是否置顶
                            </label>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="submit-container">
            <button class="btn btn-lg said-submit center-block" ms-class="submit-lock:submitState" type="button" ms-click="save()">发布</button>
        </div>
    }
</div>

@section Css{
    <link href="@Url.Content("~/Content/Back/Style/addSaid.css")" rel="stylesheet" />
}
@section HeadJs{
    @*<script src="@Url.Content("~/Content/Back/JavaScript/avalon/plus/autoComplete.js")"></script>*@
    <script>
        var TemplatePromptText = {
            errorBTitle: ['（￣工￣lll） 文章标题不正确', '你忘记填写文章标题了... '],
            errorBContext: ['(｡☉౪ ⊙｡)  文章正文不正确', '大哥你连正文都木有发表了文章谁看啊...赶紧检查一下  '],
            errorBSummary: [' (￣▽￣)~* 文章描述不正确', '文章描述是一定要有的，没有文章描述诱惑，别人也许就不会读文章了'],
            errorClasify: [' (｡・`ω´･) 文章分类不正确', '是的，为了以后让你的文章特别特别特别方便的管理/检索，一定要有文章的分类'],
            uploadImgFail: '上传图片异常，错误信息：${0}',
            uploadImgError: '上传图片失败，服务器返回信息：${0}'
        };

    </script>

}
@section FootJs{

    <script type="text/javascript">
        var Action = {
            summaryImg: '@ConfigInfo.SourceSaidPath',
            blogImageType: '@((int)Said.Models.ImageType.Blog)',
            uploadImg: '@Url.Action("Upload", "Image")',
            deleteImg: '@Url.Action("DeleteImage","Source")',
            form: '@Url.Action("AddBlog", "Blog")',
            summaryImg: '@ConfigInfo.SourceBlogPath',
            //预览
            preview: '@Url.Action("Preview","Blog")'
        },
        DataCenter = {
            tags: [],
            classifyDatas: [],
            files: []
        };

        @if (ClassifysList != null)
        {
            foreach (var item in ClassifysList)
            {
                Write(new HtmlString(string.Format("DataCenter.classifyDatas.push({{query:'{0}',name:'{0}',data:'{1}'}});", item.CName,item.ClassifyId)));
            }
        }
        @if (TagList != null)
        {
            foreach (var item in TagList)
            {
                Write(new HtmlString(string.Format("DataCenter.tags.push({{query:'{0}',name:'{0}',data:'{1}'}});", item.TagName,item.TagId)));
            }
        }
        @if (BlogFiles != null)
        {
            foreach (var item in BlogFiles)
            {
                Write(new HtmlString(string.Format("DataCenter.files.push('{0}');", item.BName)));
            }
        }

        if (DataCenter.files.length)
            DataCenter.files = DataCenter.files.map(function (item) { return item.toLowerCase() });
        //console.log(DataCenter.files);
        require(['said', 'jquery', 'so', 'avalon', 'sweetalert', 'source', 'markdown', 'highlight', 'showDownThemeGithub', 'groupInput', 'avalonUpload'], function (said, $, so, avalon, sweetalert, source, showdown, highlight) {
            $(function () {
                document.addEventListener('keydown', function (e) {
                    if (e.ctrlKey && e.keyCode == 83) {
                        e.preventDefault();
                    }
                });

                var //showdown, github并非AMD库，requireJS只能保证当前这些库已经被加载完成，而不能得到加载完成的对象，所以仍然要去window环境下获取
                    showdown = window.Showdown,
                    converter = new showdown.converter({ extensions: ['github'] }),//页面markdown转换器=>来自showDown.js
                    //解析并返回HTML
                    getContextHTML = function (context) {
                        //先使用markdown解析为HTML
                        var html = converter.makeHtml(context);
                        //再使用highlight高亮代码，highlightInHTML()这个方法是自己写的
                        return highlight.highlightInHTML(html);

                        //var $context = $('<div>' + context + '</div>');
                        ////这破玩意儿不能用HTML转换？？？
                        //highlight.configure({
                        //    tabReplace: ' '//要把这个tab替换掉
                        //});
                        ////这里要读一下hilightJS的源码，直接通过code转换
                        //$context.find('pre code').each(function (i, block) {
                        //    highlight.highlightBlock(block);
                        //});
                        ////console.info($context.html());
                        //return $context.html();
                    },
                    preview = function (title, context, classify, tags) {
                        context = getContextHTML(context);
                        var htmls = [
                            '<textarea name="BTitle">' + title + '</textarea>',
                            '<textarea name="BHTML">' + encodeURIComponent(context) + '</textarea>',
                            '<textarea name="ClassifyId">' + classify + '</textarea>',
                            tags.map(function (tag) {
                                return '<input name="BTag" value="' + tag.name + '"/>';
                            }).join('')
                        ].join('');
                        //TODO img的refer应该处理下
                        //链接也应该做转发处理

                        //context = context.replace(/<pre[^>]*>.*(<code[^>]*>)?[^<]*(<\/code>)?<\/pre>/gm, function (sourceCode) {
                        //    //console.log(highlight.highlightAuto(sourceCode));
                        //    return highlight.highlightAuto(sourceCode).value;
                        //});

                        //console.log(highlight.highlightAuto(context));
                        //return;

                        var $form = $('<form target="_blank" method="post" action="' + Action.preview + '" style="display:none;"></form>');
                        $form.append(htmls);
                        $form.submit();
                    },
                    database = new so.Database('back.addBlog'),
                    checkEmptyValue = function (key, title, summary) {
                        if (!vmBlog[key]) {
                            sweetalert(title, summary, 'warning');
                            return false;
                        }
                        return true;
                    },
                    errorHash = {
                        'bTitle': TemplatePromptText.errorBTitle,
                        'bContext': TemplatePromptText.errorBContext,
                        'bSummary': TemplatePromptText.errorBSummary,
                        'classify': TemplatePromptText.errorClasify
                    },
                    encode = function (value) {
                        return encodeURIComponent(value);
                    };


                var vmBlog = avalon.define({
                    $id: 'blog',
                    bTitle: database.val('bTitle') || '',
                    bTag: database.val('bTag') || [],
                    bSummary: database.val('bSummary') || '',
                    bReprint: database.val('bReprint') || '',
                    bScript: database.val('bScript') || '',
                    bIsTop: database.val('bIsTop') || '',
                    bCSS: database.val('bCSS') || '',
                    bContext: database.val('bContext') || '',
                    bName: database.val('bName') || '',
                    classifyId: '',
                    classify: '',
                    checkFile: false,
                    submitState: false,
                    $skipArray: ['bTag', 'classify'],
                    reset: function () {
                        database.clear();
                        sweetalert({
                            title: "准备跳转",
                            text: "正在清空本地缓存，1s后进行跳转...",
                            timer: 1000,
                            showConfirmButton: false
                        }, function () {
                            window.location.href = '/Back/Blog';
                        });
                    },
                    //保存到本地数据库
                    saveTolocalStorage: function (name, value) {
                        database.val(name, value);
                    },
                    //预览
                    preview: function (markdownCode) {
                        if (!vmBlog.bTitle.trim()) {
                            sweetalert('预览信息不完整', '标题不能为空', 'info');
                            return;
                        }
                        if (!vmBlog.bContext.trim()) {
                            sweetalert('预览信息不完整', '正文不能为空', 'info');
                            return;
                        }
                        if (!vmBlog.classifyId) {
                            sweetalert('预览信息不完整', '类别不能为空', 'info');
                            return;
                        }
                        if (!vmBlog.bTag.length) {
                            sweetalert('预览信息不完整', '至少要有一个标签', 'info');
                            return;
                        }
                        preview(vmBlog.bTitle.trim(),
                            vmBlog.bContext,//进行HTML转换
                            vmBlog.classifyId,
                            vmBlog.bTag
                            );

                    },
                    checkFileName: function () {
                        //考虑性能，DOM缓存
                        var $cache, key = 'bName';
                        return function (elem, value) {
                            !$cache && ($cache = $(elem).tooltip({ trigger: 'manual' }));
                            vmBlog.checkFile = !!(value && ~DataCenter.files.indexOf(value.toLowerCase()));
                            $cache.tooltip(vmBlog.checkFile ? 'show' : 'hide');
                            vmBlog.checkFile ?
                                database.remove(key) : database.val(key, value);
                        }
                    }(),
                    check: function () {
                        vmBlog.submitState = true;
                        var temp;
                        return ['bTitle', 'bContext', 'classify', 'bSummary'].every(function (key) {
                            temp = errorHash[key];
                            return checkEmptyValue(key, temp[0], temp[1]);
                        });
                    },
                    save: function () {
                        //锁定按钮状态
                        if (vmBlog.submitState) return;
                        if (!(vmBlog.submitState = vmBlog.check())) return;

                        var bSummaryTrim = vmBlog.bSummary.split('\n').map(function (item) {
                            return '<p>' + item + '</p>';
                        }).join('');

                        said.ajax(Action.form, {
                            'BTitle': encode(vmBlog.bTitle),
                            'Tags': vmBlog.bTag.length ? encode(JSON.stringify(vmBlog.bTag.map(function (tag) {
                                if (tag.name == tag.data) {
                                    return {
                                        TagId: null,
                                        TagName: tag.name
                                    };
                                } else
                                    return {
                                        TagId: tag.data,
                                        TagName: ''
                                    };
                            }))) : null,
                            'BSummary': encode(vmBlog.bSummary),
                            'BHTML': encodeURIComponent(getContextHTML(vmBlog.bContext)),
                            'BReprint': encode(vmBlog.bReprint),
                            'BSummaryTrim': encode(bSummaryTrim),
                            'BScript': encode(vmBlog.bScript),
                            'BIsTop': encode(vmBlog.bIsTop),
                            'BCSS': encode(vmBlog.bCSS),
                            'BContext': encode(vmBlog.bContext),
                            'BName': encode(vmBlog.bName),
                            'ClassifyId': encode(vmBlog.classifyId)
                        }).done(function (data) {
                            if (!data.code) {//done
                                sweetalert({
                                    title: '添加成功',
                                    text: so.format('喜大普奔，添加Blog《${0}》成功', vmBlog.bTitle),
                                    type: "success",
                                    //当sweetalert回调函数中需要再弹出一个sweetalert的时候，要设置这个属性
                                    closeOnConfirm: false
                                }, function () {
                                    vmBlog.reset();
                                });


                            } else {
                                sweetalert({
                                    title: '添加失败',
                                    text: so.format('服务器返回信息（错误代码 ${1}）：${0}', data.data.msg.split(',').map(function (msg) {
                                        return '<p>' + msg + '</p>';
                                    }).join(''), data.code),
                                    html: true,
                                    type: 'error'
                                });
                            }

                        }).fail(function (data) {
                            sweetalert('添加(提交)异常', so.format('异常代码：${0}（${1}）', data.status, data.statusText), 'warning');
                        }).always(function () {
                            vmBlog.submitState = false;
                        });
                    }
                });

                //vmBlog.$watch('$all', function () {
                //    console.log(arguments);
                //});

                //tag
                avalon.define({
                    $id: 'tagController',
                    //tags: DataCenter.tags,
                    groupInput: {
                        datas: DataCenter.tags,
                        multiple: true,
                        zIndex: 5,
                        callback: function (values) {
                            //console.log(values);
                            vmBlog.bTag = values;//[ {"name":"ES","query":"ES","data":"tagID"} ]
                            database.val('bTag', values);
                        },
                        values: vmBlog.bTag
                    }
                });
                //classify
                var _classifydbData = database.val('classify');
                if (_classifydbData) {
                    vmBlog.classifyId = _classifydbData.data;
                    vmBlog.classify = _classifydbData.name;
                }
                avalon.define({
                    $id: 'classifyController',
                    groupInput: {
                        datas: DataCenter.classifyDatas,
                        zIndex: 4,
                        custom: false,
                        callback: function (value) {
                            //console.log(value);
                            vmBlog.classifyId = value.data;
                            vmBlog.classify = value.name;
                            database.val('classify', value);
                        },
                        values: _classifydbData ? [_classifydbData.data] : null
                        //classContaier: 'queryInputBar'
                    }
                });


                //var _summaryDialog = $.source({
                //    zIndex: 6,
                //    loadUrl: '/Back/Image/GetImagesList',
                //    path: Action.summaryImg,
                //    type: Action.blogImageType,
                //    uploadUrl: Action.uploadImg,
                //    //deleteUrl: '/Back/Source/RealDeleteImage',//这个是物理删除，测试用这个
                //    multiple: false,
                //    deleteUrl: Action.deleteImg, //这个是逻辑删除，上线用这个
                //    callback: function (data) {
                //        if (data) {
                //            vmUpload.data = data;
                //            var imgSrc = Action.summaryImg + data.IName;
                //            vmUpload.img = data.IName;
                //            vmUpload.imgSrc = imgSrc;
                //            vmBlog.bImg = data.ImageId;
                //            database.val('bImg', data.ImageId).val('summary.imgSrc', imgSrc);
                //        }
                //    }
                //});
                //var vmUpload = avalon.define({
                //    $id: 'uploadController',
                //    imgSrc: database.val('summary.imgSrc') || '',
                //    dialog: function (id) {
                //        _summaryDialog.show();
                //    },
                //    clear: function () {
                //        database.remove('bImg')
                //        database.remove('summary.imgSrc');
                //        vmBlog.bImg = null;
                //        vmUpload.imgSrc = vmUpload.img = '';
                //    }
                //});

                //upload
                //console.log(vmUpload);




                //var vmBlog = avalon.define('blog', function (vm) {
                //    vm.BTitle = '';
                //});
                avalon.scan();
                //console.dir(avalon.vmodels);
            });
        });
    </script>
}
