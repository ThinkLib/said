@using Said.Common;
@model Said.Models.Blog
@{
    Layout = "~/Areas/Back/Views/Shared/_LayoutBack.cshtml";
    var ClassifysList = ViewData["ClassifysList"] as IList<Said.Models.Classify>;
    var TagList = ViewData["TagList"] as IList<Said.Models.Tag>;
    var BlogFiles = ViewData["BlogFiles"] as IList<Said.Models.Blog>;
}
<div id="said-help" class="said-mask-content said-watermark">
    <ul>
        <li>英文和中文中间请在英文<span class="keywords">两侧使用空格</span>，排版更漂亮</li>
        <li>图片请上传到本站再使用，<span class="keywords">不要使用外链</span>的图片</li>
        <li>&lt;li&gt;标签里再放&lt;code&gt;片段的时候，请在&lt;li&gt;下面使用一个回车（空行）</li>
    </ul>
</div>
<ol class="breadcrumb">
    <li><a href="/Back">Home</a></li>
    <li>文章管理</li>
    <li class="active">添加文章</li>
    <li class="g-help"><a href="javascript:;" id="said-help-btn" title="帮助"><i class="fa fa-question-circle"></i></a></li>
</ol>
<div class="main-context">
    <div class="modal fade" ms-controller="modal" id="blog-modal">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal"><span aria-hidden="true">&times;</span><span class="sr-only">Close</span></button>
                    <h4 class="modal-title">{{title}}</h4>
                </div>
                <div class="modal-body">{{body}}</div>
            </div>
        </div>
    </div>
    @using (Html.BeginForm("AddBlog", "Blog", FormMethod.Post, new Dictionary<string, object>(){
    { "spellcheck", "spellcheck" },
    { "name", "saidForm" },
    { "novalidate", "novalidate" },
    { "ms-controller", "blog" },
    { "OnSubmit", "return false;" }}))
    {
        <div class="said-article">
            <div class="said-title-con">
                @Html.TextBoxFor(m => m.BTitle, new Dictionary<string, object>() {
                            { "ms-duplex", "bTitle" },
                            { "class", "said-title" },
                            { "ms-class", "said-error:!bTitle.length" },
                            { "ms-change", "saveTolocalStorage('bTitle',bTitle)" },
                            { "autocomplete", "off" },
                            { "placeholder", "文章标题" },
                            { "required", "required" }
            })
            </div>
            <div class="said-context-content">
                @Html.TextAreaFor(m => m.BContext, new Dictionary<string, object>() {
                            { "class", "said-context said-watermark" },
                            { "ms-duplex", "bContext" },
                            { "ms-change", "saveTolocalStorage('bContext',bContext)" },
                            { "required", "required" },
                            { "placeholder", "请使用Markdown编写正文" }
                })
            </div>
            <button class="btn btn-lg said-priview center-block" ms-click="preview()" type="button">预览</button>
        </div>
        @*ms-controller="defaultsDatas"*@
        <div class="row said-view-container">
            <div class="col-md-6">
                <div class="panel panel-default relative-container">
                    <div class="panel-heading">附加信息</div>
                    <div class="panel-body">
                        <div class="input-group" ms-controller="tagController">
                            <span class="input-group-addon">标签</span>
                            <input class="tag-input" ms-widget="groupInput" placeholder="标签，支持[tab]分隔" autocomplete="off" />
                        </div>
                        <div class="input-group" ms-class="has-error:!classifyId" ms-controller="classifyController">
                            <span class="input-group-addon">分类</span>
                            @Html.TextBoxFor(m => m.Classify.CName, new Dictionary<string, object>() {
                                { "class", "classify-input" },
                                { "ms-duplex", "classify" },
                                { "placeholder", "分类名称" },
                                { "autocomplete", "off" },
                                { "ms-widget", "groupInput" }
                            })
                        </div>
                        <div class="form-group">
                            <label>简述</label>
                            @Html.TextAreaFor(m => m.BSummary, new Dictionary<string, object>() {
                            { "class", "form-control" },
                            { "autocomplete", "off" },
                           { "style","height:142px"},
                            { "ms-duplex", "bSummary" },
                            { "ms-class", "!bSummary" },
                            { "placeholder", "简介，支持多行" },
                            { "ms-change", "saveTolocalStorage('bSummary',bSummary)" }})
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-md-6">
                <div class="panel panel-default">
                    <div class="panel-heading ">可选信息</div>
                    <div class="panel-body">
                        <div class="input-group" ms-class="has-error:checkFile">
                            <span class="input-group-addon">文件</span>
                            @Html.TextBoxFor(m => m.BName, new Dictionary<string, object>() {
                                { "class", "form-control" },
                                { "ms-duplex", "bName" },
                                { "ms-input", "checkFileName(this,bName)" },
                                //{ "ms-change", "saveTolocalStorage('bName',bName)" },
                                { "data-toggle", "tooltip" },
                                { "data-placement", "top" },
                                { "data-title", "该文件名已经存在" },
                                { "data-animation", "false" },
                                { "placeholder", "文章发布的（文件）名称" }
                            })
                        </div>
                        <div class="form-group">
                            <label>JavaScript</label>
                            @Html.TextAreaFor(m => m.BScript, new Dictionary<string, object>() {
                                { "class", "form-control" },
                                { "placeholder", "自定义JavaScript" },
                                { "ms-change", "saveTolocalStorage('bScript',bScript)" },
                                { "ms-duplex", "bScript" }
                            })
                        </div>
                        <div class="form-group">
                            <label>CSS</label>
                            @Html.TextAreaFor(m => m.BCSS, new Dictionary<string, object>() {
                                { "class", "form-control" },
                                { "placeholder", "自定义CSS" },
                                { "ms-change", "saveTolocalStorage('bCSS',bCSS)" },
                                { "ms-duplex", "bCSS" }
                            })
                        </div>
                        <div class="checkbox said-checkbox">
                            <label>
                                @Html.CheckBoxFor(m => m.BReprint, new Dictionary<string, object>() {
                                { "ms-duplex-checked", "bReprint" },
                                { "ms-change", "saveTolocalStorage('bReprint',bReprint)" }
                            })是否转载
                            </label>
                            <label>
                                @Html.CheckBoxFor(m => m.BIsTop, new Dictionary<string, object>() {
                                { "ms-duplex-checked", "bIsTop" },
                                { "ms-change", "saveTolocalStorage('bIsTop',bIsTop)" }
                            })是否置顶
                            </label>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="submit-container">
            <button class="btn btn-lg said-submit center-block" ms-class="submit-lock:submitState" type="button" ms-click="save()">发布</button>
        </div>
    }
</div>

@section Css{
    @Styles.Render("~/static/back/css/said.add.css")
}

@section FootJs{
    @Scripts.Render("~/static/back/js/blog.add.js")
    <script type="text/javascript">
        var Action = {
            summaryImg: '@ConfigInfo.SourceSaidPath',
            blogImageType: '@((int)Said.Models.ImageType.Blog)',
            uploadImg: '@Url.Action("Upload", "Image")',
            deleteImg: '@Url.Action("DeleteImage","Source")',
            form: '@Url.Action("AddBlog", "Blog")',
            summaryImg: '@ConfigInfo.SourceBlogPath',
            //预览
            preview: '@Url.Action("Preview","Blog")'
        },
        DataCenter = {
            tags: [],
            classifyDatas: [],
            files: []
        };

        @if (ClassifysList != null)
        {
            foreach (var item in ClassifysList)
            {
                Write(Html.Raw(string.Format("DataCenter.classifyDatas.push({{query:'{0}',name:'{0}',data:'{1}'}});", item.CName,item.ClassifyId)));
            }
        }
        @if (TagList != null)
        {
            foreach (var item in TagList)
            {
                Write(Html.Raw(string.Format("DataCenter.tags.push({{query:'{0}',name:'{0}',data:'{1}'}});", item.TagName,item.TagId)));
            }
        }
        @if (BlogFiles != null)
        {
            foreach (var item in BlogFiles)
            {
                Write(Html.Raw(string.Format("DataCenter.files.push('{0}');", item.BName)));
            }
        }

        if (DataCenter.files.length)
            DataCenter.files = DataCenter.files.map(function (item) { return item.toLowerCase() });

        require(['blog.add'], function (view) {
            view(DataCenter, Action);
        });
    </script>
}
