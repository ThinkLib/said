@using Said.Common;
@model Said.Models.Article
@{
    ViewBag.Title = "编辑Said - " + Model.STitle;
    Layout = "~/Areas/Back/Views/Shared/_LayoutBack.cshtml";
    var SongsList = ViewData["SongsList"] as IList<Said.Models.Song>;
    var AllFileNames = ViewData["FileNames"] as IList<string>;

}
<ol class="breadcrumb">
    <li><a href="/Back">Home</a></li>
    <li>Said管理</li>
    <li class="active">编辑Said - 《@Model.STitle》</li>
    <li class="g-help"><a href="javascript:;" id="said-help-btn" title="帮助"><i class="fa fa-question-circle"></i></a></li>
</ol>
<div id="said-help" class="said-mask-content said-watermark">
    <ul>
        <li>Said生成的缩略图不能有<span class="keywords">透明背景</span>（因为缩略图最终生成是jpg格式的）</li>
        <li>上传的图片，最后会被裁剪为<span class="keywords">1.82</span>比例的图片</li>
        <li>上传的图片不允许超过<span class="keywords">1MB</span></li>
        <li>上传的音乐文件不允许超过<span class="keywords">10MB</span></li>
        <li>选择正确的上传路径！默认上传的图片都会放到<span class="keywords">其他</span>下</li>
    </ul>
</div>
<div class="main-context">
    @using (Html.BeginForm("AddSaid", "Said", FormMethod.Post, new Dictionary<string, object>(){
        { "spellcheck", "spellcheck" },
        { "name", "saidForm" },
        { "novalidate", "novalidate" },
        { "ms-controller", "said" },
        { "OnSubmit", "return false;" }}))
    {
        <div class="said-article">
            <div class="said-title-con">
                @Html.TextBoxFor(m => m.STitle, new Dictionary<string, object>() {
                    { "ms-duplex", "sTitle" },
                    { "class", "said-title" },
                    { "ms-class", "said-error:!sTitle.length" },
                    { "autocomplete", "off" },
                    { "placeholder", "文章标题" },
                    { "required", "" },
                })
                @Html.HiddenFor(m => m.STitle, new Dictionary<string, object>() {
                    { "id", "sTitle-hidden" },
                    { "ms-dom", "sTitle-h" }
                })
            </div>
            <div class="said-context-content">
                <!-- said-error-->
                @Html.TextAreaFor(m => m.SContext, new Dictionary<string, object>() {
                   { "class", "said-context said-watermark" },
                   { "autocomplete", "off" },
                   { "ms-duplex", "sContext" },
                   { "placeholder", "请使用Markdown编写正文" },
                   { "required", "" }
           })
                @Html.HiddenFor(m => m.SContext, new Dictionary<string, object>() {
                    { "id", "sContext-hidden" },
                    { "ms-dom", "sContext-h" }
                })
            </div>
        </div>
        <div class="row said-view-container">
            <div class="col-md-6">
                <div class="panel panel-default relative-container">
                    <div class="panel-heading">歌曲</div>
                    @Html.HiddenFor(m => m.Song.SongId, new Dictionary<string, object>() {
                                        { "id", "SongId-hidden" },
                                        { "ms-dom", "SongId-h" }
                                    })
                    <div class="panel-body" ms-controller="song">
                        <div class="afterClear">
                            <div class="col-md-4">
                                <div class="music-img">
                                    <div class="thumbnail">
                                        <img ms-attr-src="imgSrc? imgSrc:'/Content/Back/Images/cd-default.png'" />
                                    </div>
                                </div>
                            </div>
                            <div class="music-info col-md-8">
                                <div class="input-group">
                                    <span class="input-group-addon">歌曲</span>
                                    @Html.TextBoxFor(m => m.Song.SongName, new Dictionary<string, object>() {
                                            { "class", "classify-input" },
                                            { "autocomplete", "off" },
                                            { "ms-duplex", "songName" },
                                            { "placeholder", "歌曲名称" },
                                            { "required", "" },
                                            { "ms-widget", "groupInput" }
                                        })
                                </div>
                                <div class="input-group">
                                    <span class="input-group-addon">专辑</span>
                                    @Html.TextBoxFor(m => m.Song.SongAlbum, new Dictionary<string, object>(){
                                        { "class","form-control music-input"},
                                        { "placeholder", "歌曲专辑"},
                                        {"disabled","disabled"},
                                        { "ms-duplex", "songAlbum" },
                                        { "autocomplete", "off"}
                                     })
                                </div>
                                <div class="input-group">
                                    <span class="input-group-addon">歌手</span>
                                    @Html.TextBoxFor(m => m.Song.SongArtist, new Dictionary<string, object>(){
                                        { "class","form-control music-input"},
                                        { "placeholder", "艺术家"},
                                        {"disabled","disabled"},
                                        { "ms-duplex", "songArtist" },
                                        { "autocomplete", "off"}
                                    })
                                </div>
                                <div class="input-group" data-ng-class="has-error">
                                    <span class="input-group-addon">文件</span>
                                    @Html.TextBoxFor(m => m.Song.SongFileName, new Dictionary<string, object>() {
                                        { "class", "form-control music-input" },
                                        { "autocomplete", "off" },
                                        {"disabled","disabled"},
                                        { "ms-attr-value", "songFileName" },
                                        { "placeholder", "文件名（自动生成）" },
                                    })
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                @Html.HiddenFor(m => m.ImageId, new Dictionary<string, object>() {
                                        { "id", "ImageId-hidden" },
                                        { "ms-dom", "ImageId-h" }
                                    })
                @Html.HiddenFor(m => m.Image.IFileName, new Dictionary<string, object>() {
                                        { "id", "IFileName-hidden" },
                                        { "ms-dom", "IFileName-h" }
                                    })
                @Html.HiddenFor(m => m.SSummary, new Dictionary<string, object>() {
                                        { "id", "SSummary-hidden" },
                                        { "ms-dom", "sSummary-h" }
                                    })
                <div class="panel panel-default relative-container" ms-controller="uploadController">
                    <div style="z-index: 2;" class="addSaid-mask" ms-visible="!imgSrc" ms-click="dialog()">
                        <span class="so-upload-text">选择文章缩略图</span>
                    </div>
                    <div class="panel-heading">描述</div>
                    <div class="panel-body">
                        <div class="col-md-4">
                            <div class="summay-img">
                                <div class="thumbnail">
                                    <div class="summay-img-item" ms-css-background-image="'url(' + (imgSrc ? imgSrc : '/Content/Images/UEDImg/demo-img6.jpg') + ')'"></div>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-8">
                            @Html.TextAreaFor(m => m.SSummary, new Dictionary<string, object>() {
                                    { "class", "said-dis" },
                                    { "autocomplete", "off" },
                                    { "placeholder", "简介[支持HTML]" },
                                    { "required", "" },
                                    { "data-validate", "" },
                                    { "ms-duplex", "sSummary" }
                            })
                            <div class="songOp-btn song-up-content">
                                <button type="button" class="btn btn-danger songBtn" ms-click="clear()">移除图片</button>
                            </div>
                        </div>

                    </div>
                </div>
            </div>
            <div class="col-md-6">
                <div class="panel panel-default">
                    <div class="panel-heading panel-subTitle">可选信息</div>
                    <div class="panel-body">
                        <div class="input-group">
                            <span class="input-group-addon">文件</span>
                            @Html.TextBoxFor(m => m.SName, new Dictionary<string, object>() {
                                    { "class", "form-control" },
                                    { "ms-duplex", "sName" },
                                    { "ms-input", "checkFileName(this,sName)" },
                                    { "autocomplete", "off" },
                                    { "placeholder", "文章发布的（文件）名称,为空自动生成" },
                                    { "data-toggle", "tooltip" },
                                    { "data-placement", "top" },
                                    { "data-title", "该文件名已经存在" },
                                    { "data-animation", "false" }
                       })
                            @Html.HiddenFor(m => m.SName, new Dictionary<string, object>() {
                                        { "id", "sName-hidden" },
                                        { "ms-dom", "sName-h" }
                                    })
                        </div>
                        <div class="form-group">
                            <label>JavaScript</label>
                            @Html.TextAreaFor(m => m.SScript, new Dictionary<string, object>() {
                                { "class", "form-control" },
                                { "placeholder", "自定义JavaScript" },
                                { "ms-duplex", "sScript" }
                            })
                            @Html.HiddenFor(m => m.SScript, new Dictionary<string, object>() {
                                        { "id", "sScript-hidden" },
                                        { "ms-dom", "sScript-h" }
                                    })
                        </div>
                        <div class="form-group">
                            <label>CSS</label>
                            @Html.TextAreaFor(m => m.SCSS, new Dictionary<string, object>() {
                                { "class", "form-control" },
                                { "placeholder", "自定义CSS" },
                                { "ms-duplex", "sCSS" }
                            })
                            @Html.HiddenFor(m => m.SCSS, new Dictionary<string, object>() {
                                        { "id", "sCSS-hidden" },
                                        { "ms-dom", "sCSS-h" }
                                    })
                        </div>
                        <div class="checkbox said-checkbox">
                            <label>
                                @Html.CheckBoxFor(m => m.SReprint, new Dictionary<string, object>() {
                                { "ms-duplex-checked", "sReprint" }
                           })是否转载
                                @Html.HiddenFor(m => m.SReprint, new Dictionary<string, object>() {
                                        { "id", "sReprint-hidden" },
                                        { "ms-dom", "sReprint-h" }
                                    })
                            </label>
                            <label>
                                @Html.CheckBoxFor(m => m.SIsTop, new Dictionary<string, object>() {
                                { "ms-duplex-checked", "sIsTop" }
                            })是否置顶
                                @Html.HiddenFor(m => m.SIsTop, new Dictionary<string, object>() {
                                        { "id", "sIsTop-hidden" },
                                        { "ms-dom", "sIsTop-h" }
                                    })
                            </label>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="submit-container">
            <button class="btn btn-lg btn-success longBtn" type="button" ms-click="submit(false)">确认修改</button>
            <button class="btn btn-lg longBtn" type="button" ms-click="submit(true)">存为草稿</button>
        </div>
    }
</div>
@section Css{
    @Styles.Render("~/static/back/css/said.add.css")
}
@section FootJs{
    @Scripts.Render("~/static/back/js/said.edit.js")
    <script type="text/javascript">
        var saidId = '@Model.SaidId',
            oldFileName = '@Model.SName',
            Action = {
                uploadSaidImg: '@Url.Action("Upload", "Image")',
                uploadMusicUrl: '@Url.Action("UploadSongImage", "Source")',
                getMusicImg: '@Url.Action("GetImagesList", "Image")',
                musicImg: '@Url.Action("UploadMusicImg", "Source")',
                deleteImage: '@Url.Action("DeleteImage","Source")',
                music: '@Url.Action("UploadMusic", "Source")',
                existsSongFile: '@Url.Action("ExistsSongFileName", "Back")',
                existsSaidName: '@Url.Action("ExistsSaidFileName", "Back")',
                form: '@Url.Action("EditSaid", "Said")'
            },
        Source = {
            song: '@ConfigInfo.SourceMusicPath',
            songImg: '@ConfigInfo.SourceMusicImagePath',
            summaryImg: '@ConfigInfo.SourceSaidPath',
            songType: '@((int)Said.Models.ImageType.Music)',
            saidImageType: '@((int)Said.Models.ImageType.Said)'
        },
        DataCenter = {
            songs: [
                //{
                //    name: 'Yellow',
                //    query: 'Yellow - Coldplay',
                //    data: {
                //        id: '106f168f-10f1-4459-918d-f811bc8a7fa6',
                //        name: 'Yellow',
                //        album: 'Yellow',
                //        artist: 'Coldplay',
                //        fileName: '302320154702223701.mp3',
                //        img: '098920153702223601.jpg'//注意这个路径应该只是个图片名称
                //    }
                //}
            ],
            //MIME参考：http://www.w3school.com.cn/media/media_mimeref.asp
            imgFilters: ['jpg', 'jpeg', 'jpe', 'bmp', 'png', 'gif'/*, 'image/png', 'image/bmp', 'image/gif', 'image/jpeg'*/],
            musicFilters: ['mp3', 'ogg'],
            files: []
        };

        @{
            if (SongsList != null) {
                foreach (Said.Models.Song item in SongsList)
                {
                    Write(new HtmlString(string.Format("DataCenter.songs.push({{ name: \"{0}\", query: \"{0}{1}\", data: {{ id: \"{2}\", name: \"{0}\", album:\"{3}\", artist:\"{1}\", fileName: \"{4}\", img: \"{5}\" }}}});",
                        item.SongName,item.SongArtist,item.SongId,item.SongAlbum,item.SongFileName,item.Image.IFileName
                        )));
                }
            }
            if(AllFileNames!=null){
                foreach (string fileName in AllFileNames)
	            {
                    Write(new HtmlString(string.Format("DataCenter.files.push('{0}');",fileName)));
	            }
            }
        }
        DataCenter.files = DataCenter.files.filter(function (existFileName) {
            return existFileName != oldFileName;
        })
        require(['said.edit'], function (view) {
            view(saidId, Action, Source, DataCenter);
        })
    </script>
}