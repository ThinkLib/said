@using Said.Common;
@model Said.Models.Article
@{
    ViewBag.Title = "编辑Said - " + Model.STitle;
    Layout = "~/Areas/Back/Views/Shared/_LayoutBack.cshtml";
    var SongsList = ViewData["SongsList"] as IList<Said.Models.Song>;
    var AllFileNames = ViewData["FileNames"] as IList<string>;

}
<ol class="breadcrumb">
    <li><a href="/Back">Home</a></li>
    <li>Said管理</li>
    <li class="active">编辑Said - 《@Model.STitle》</li>
    <li class="g-help"><a href="javascript:;" id="said-help-btn" title="帮助"><i class="fa fa-question-circle"></i></a></li>
</ol>
<div id="said-help" class="said-mask-content said-watermark">
    <ul>
        <li>Said生成的缩略图不能有<span class="keywords">透明背景</span>（因为缩略图最终生成是jpg格式的）</li>
        <li>上传的图片，最后会被裁剪为<span class="keywords">1.82</span>比例的图片</li>
        <li>上传的图片不允许超过<span class="keywords">1MB</span></li>
        <li>上传的音乐文件不允许超过<span class="keywords">10MB</span></li>
        <li>选择正确的上传路径！默认上传的图片都会放到<span class="keywords">其他</span>下</li>
    </ul>
</div>
<div class="main-context">
    @using (Html.BeginForm("AddSaid", "Said", FormMethod.Post, new Dictionary<string, object>(){
        { "spellcheck", "spellcheck" },
        { "name", "saidForm" },
        { "novalidate", "novalidate" },
        { "ms-controller", "said" },
        { "OnSubmit", "return false;" }}))
    {
        <div class="said-article">
            <div class="said-title-con">
                @Html.TextBoxFor(m => m.STitle, new Dictionary<string, object>() {
                    { "ms-duplex", "sTitle" },
                    { "class", "said-title" },
                    { "ms-class", "said-error:!sTitle.length" },
                    { "autocomplete", "off" },
                    { "placeholder", "文章标题" },
                    { "required", "" },
                })
                @Html.HiddenFor(m => m.STitle, new Dictionary<string, object>() {
                    { "id", "sTitle-hidden" },
                    { "ms-dom", "sTitle-h" }
                })
            </div>
            <div class="said-context-content">
                <!-- said-error-->
                @Html.TextAreaFor(m => m.SContext, new Dictionary<string, object>() {
                   { "class", "said-context said-watermark" },
                   { "autocomplete", "off" },
                   { "ms-duplex", "sContext" },
                   { "placeholder", "请使用Markdown编写正文" },
                   { "required", "" }
           })
                @Html.HiddenFor(m => m.SContext, new Dictionary<string, object>() {
                    { "id", "sContext-hidden" },
                    { "ms-dom", "sContext-h" }
                })
            </div>
        </div>
        <div class="row said-view-container">
            <div class="col-md-6">
                <div class="panel panel-default relative-container">
                    <div class="panel-heading">歌曲</div>
                    @Html.HiddenFor(m => m.Song.SongId, new Dictionary<string, object>() {
                                        { "id", "SongId-hidden" },
                                        { "ms-dom", "SongId-h" }
                                    })
                    <div class="panel-body" ms-controller="song">
                        <div class="afterClear">
                            <div class="col-md-4">
                                <div class="music-img">
                                    <div class="thumbnail">
                                        <img ms-attr-src="imgSrc? imgSrc:'/Content/Back/Images/cd-default.png'" />
                                    </div>
                                </div>
                            </div>
                            <div class="music-info col-md-8">
                                <div class="input-group">
                                    <span class="input-group-addon">歌曲</span>
                                    @*<div class="queryInputBar">*@
                                    @Html.TextBoxFor(m => m.Song.SongName, new Dictionary<string, object>() {
                                            { "class", "classify-input" },
                                            { "autocomplete", "off" },
                                            { "ms-duplex", "songName" },
                                            { "placeholder", "歌曲名称" },
                                            { "required", "" },
                                            { "ms-widget", "groupInput" }
                                        })
                                    @*</div>*@
                                </div>
                                <div class="input-group">
                                    <span class="input-group-addon">专辑</span>
                                    @Html.TextBoxFor(m => m.Song.SongAlbum, new Dictionary<string, object>(){
                                        { "class","form-control music-input"},
                                        { "placeholder", "歌曲专辑"},
                                        {"disabled","disabled"},
                                        { "ms-duplex", "songAlbum" },
                                        { "autocomplete", "off"}
                                     })
                                </div>
                                <div class="input-group">
                                    <span class="input-group-addon">歌手</span>
                                    @Html.TextBoxFor(m => m.Song.SongArtist, new Dictionary<string, object>(){
                                        { "class","form-control music-input"},
                                        { "placeholder", "艺术家"},
                                        {"disabled","disabled"},
                                        { "ms-duplex", "songArtist" },
                                        { "autocomplete", "off"}
                                    })
                                </div>
                                <div class="input-group" data-ng-class="has-error">
                                    <span class="input-group-addon">文件</span>
                                    @Html.TextBoxFor(m => m.Song.SongFileName, new Dictionary<string, object>() {
                                        { "class", "form-control music-input" },
                                        { "autocomplete", "off" },
                                        {"disabled","disabled"},
                                        { "ms-attr-value", "songFileName" },
                                        { "placeholder", "文件名（自动生成）" },
                                    })
                                </div>
                                @*<div class="songOp-btn">
                                        <button type="button" class="btn btn-danger songBtn" ms-click="remove()" title="移除歌曲信息">移除</button>
                                    </div>*@
                            </div>
                        </div>
                    </div>
                </div>
                @Html.HiddenFor(m => m.ImageId, new Dictionary<string, object>() {
                                        { "id", "ImageId-hidden" },
                                        { "ms-dom", "ImageId-h" }
                                    })
                @Html.HiddenFor(m => m.Image.IFileName, new Dictionary<string, object>() {
                                        { "id", "IFileName-hidden" },
                                        { "ms-dom", "IFileName-h" }
                                    })
                @Html.HiddenFor(m => m.SSummary, new Dictionary<string, object>() {
                                        { "id", "SSummary-hidden" },
                                        { "ms-dom", "sSummary-h" }
                                    })
                <div class="panel panel-default relative-container" ms-controller="uploadController">
                    <div style="z-index: 2;" class="addSaid-mask" ms-visible="!imgSrc" ms-click="dialog()">
                        <span class="so-upload-text">选择文章缩略图</span>
                    </div>
                    @*<div ms-widget="upload,uploadImages"></div>*@
                    <div class="panel-heading">描述</div>
                    <div class="panel-body">
                        <div class="col-md-4">
                            <div class="summay-img">
                                <div class="thumbnail">
                                    <div class="summay-img-item" ms-css-background-image="'url(' + (imgSrc ? imgSrc : '../../Content/Images/UEDImg/demo-img6.jpg') + ')'"></div>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-8">
                            @Html.TextAreaFor(m => m.SSummary, new Dictionary<string, object>() {
                                    { "class", "said-dis" },
                                    { "autocomplete", "off" },
                                    { "placeholder", "简介[支持HTML]" },
                                    { "required", "" },
                                    { "data-validate", "" },
                                    { "ms-duplex", "sSummary" }
                            })
                            <div class="songOp-btn song-up-content">
                                <button type="button" class="btn btn-danger songBtn" ms-click="clear()">移除图片</button>
                            </div>
                        </div>

                    </div>
                </div>
            </div>
            <div class="col-md-6">
                <div class="panel panel-default">
                    <div class="panel-heading panel-subTitle">可选信息</div>
                    <div class="panel-body">
                        <div class="input-group">
                            <span class="input-group-addon">文件</span>
                            @Html.TextBoxFor(m => m.SName, new Dictionary<string, object>() {
                                    { "class", "form-control" },
                                    { "ms-duplex", "sName" },
                                    { "ms-input", "checkFileName(this,sName)" },
                                    { "autocomplete", "off" },
                                    { "placeholder", "文章发布的（文件）名称,为空自动生成" },
                                    { "data-toggle", "tooltip" },
                                    { "data-placement", "top" },
                                    { "data-title", "该文件名已经存在" },
                                    { "data-animation", "false" }
                       })
                            @Html.HiddenFor(m => m.SName, new Dictionary<string, object>() {
                                        { "id", "sName-hidden" },
                                        { "ms-dom", "sName-h" }
                                    })
                        </div>
                        <div class="form-group">
                            <label>JavaScript</label>
                            @Html.TextAreaFor(m => m.SScript, new Dictionary<string, object>() {
                                { "class", "form-control" },
                                { "placeholder", "自定义JavaScript" },
                                { "ms-duplex", "sScript" }
                            })
                            @Html.HiddenFor(m => m.SScript, new Dictionary<string, object>() {
                                        { "id", "sScript-hidden" },
                                        { "ms-dom", "sScript-h" }
                                    })
                        </div>
                        <div class="form-group">
                            <label>CSS</label>
                            @Html.TextAreaFor(m => m.SCSS, new Dictionary<string, object>() {
                                { "class", "form-control" },
                                { "placeholder", "自定义CSS" },
                                { "ms-duplex", "sCSS" }
                            })
                            @Html.HiddenFor(m => m.SCSS, new Dictionary<string, object>() {
                                        { "id", "sCSS-hidden" },
                                        { "ms-dom", "sCSS-h" }
                                    })
                        </div>
                        <div class="checkbox said-checkbox">
                            <label>
                                @*@Html.CheckBoxFor(Model => Model.SReprint, new { @type = "checkbox" })如果是直接提交表单，则可以直接采用checkbox控件，会生成两个input，具体请查阅：http://www.cnblogs.com/freeliver54/archive/2013/05/10/3070384.html*@
                                @Html.CheckBoxFor(m => m.SReprint, new Dictionary<string, object>() {
                                { "ms-duplex-checked", "sReprint" }
                           })是否转载
                                @Html.HiddenFor(m => m.SReprint, new Dictionary<string, object>() {
                                        { "id", "sReprint-hidden" },
                                        { "ms-dom", "sReprint-h" }
                                    })
                            </label>
                            <label>
                                @Html.CheckBoxFor(m => m.SIsTop, new Dictionary<string, object>() {
                                { "ms-duplex-checked", "sIsTop" }
                            })是否置顶
                                @Html.HiddenFor(m => m.SIsTop, new Dictionary<string, object>() {
                                        { "id", "sIsTop-hidden" },
                                        { "ms-dom", "sIsTop-h" }
                                    })
                            </label>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="submit-container">
            <button class="btn btn-lg btn-success longBtn" type="button" ms-click="submit(false)">确认修改</button>
            <button class="btn btn-lg longBtn" type="button" ms-click="submit(true)">存为草稿</button>
            <!--data-ng-class="{'submit-lock':!saidForm.$valid}"-->
        </div>
    }
</div>
@section Css{
    <link href="@Url.Content("~/Content/Back/Style/addSaid.css")" rel="stylesheet" />
}
@*@section HeadJs{
        <script src="@Url.Content("")"></script>
    }*@
@section FootJs{

    <script type="text/javascript">
        var Action = {
            uploadSaidImg: '@Url.Action("Upload", "Image")',
            uploadMusicUrl: '@Url.Action("UploadSongImage", "Source")',
            getMusicImg: '@Url.Action("GetImagesList", "Image")',
            musicImg: '@Url.Action("UploadMusicImg", "Source")',
            deleteImage: '@Url.Action("DeleteImage","Source")',
            music: '@Url.Action("UploadMusic", "Source")',
            existsSongFile: '@Url.Action("ExistsSongFileName", "Back")',
            existsSaidName: '@Url.Action("ExistsSaidFileName", "Back")',
            form: '@Url.Action("EditSaid", "Said")'
        },
        Source = {
            song: '@ConfigInfo.SourceMusicPath',
            songImg: '@ConfigInfo.SourceMusicImagePath',
            summaryImg: '@ConfigInfo.SourceSaidPath',
            songType: '@((int)Said.Models.ImageType.Music)',
            saidImageType: '@((int)Said.Models.ImageType.Said)'
        },
        DataCenter = {
            songs: [
                //{
                //    name: 'Yellow',
                //    query: 'Yellow - Coldplay',
                //    data: {
                //        id: '106f168f-10f1-4459-918d-f811bc8a7fa6',
                //        name: 'Yellow',
                //        album: 'Yellow',
                //        artist: 'Coldplay',
                //        fileName: '302320154702223701.mp3',
                //        img: '098920153702223601.jpg'//注意这个路径应该只是个图片名称
                //    }
                //}
            ],
            //MIME参考：http://www.w3school.com.cn/media/media_mimeref.asp
            imgFilters: ['jpg', 'jpeg', 'jpe', 'bmp', 'png', 'gif'/*, 'image/png', 'image/bmp', 'image/gif', 'image/jpeg'*/],
            musicFilters: ['mp3', 'ogg'],
            files: []
        };

        @{
            if (SongsList != null) {
                foreach (Said.Models.Song item in SongsList)
                {
                    Write(new HtmlString(string.Format("DataCenter.songs.push({{ name: \"{0}\", query: \"{0}{1}\", data: {{ id: \"{2}\", name: \"{0}\", album:\"{3}\", artist:\"{1}\", fileName: \"{4}\", img: \"{5}\" }}}});",
                        item.SongName,item.SongArtist,item.SongId,item.SongAlbum,item.SongFileName,item.Image.IFileName
                        )));
                }
            }
            if(AllFileNames!=null){
                foreach (string fileName in AllFileNames)
	            {
                    Write(new HtmlString(string.Format("DataCenter.files.push('{0}');",fileName)));
	            }
            }
        }
        require(['said', 'jquery', 'so', 'avalon', 'source', 'dialog', 'sweetalert', 'showdown', 'upload', 'avalonUpload', 'groupInput'], function (said, $, so, avalon, source, dialog, sweetalert, showdown) {
            'use strict';
            $(function () {
                var slice = Array.prototype.slice,
                    oldFileName = '@Model.SName';
                DataCenter.files = DataCenter.files.filter(function (existFileName) {
                    return existFileName != oldFileName;
                })
                var converter = new showdown.Converter({ /*extensions: ['github'],*/
                    omitExtraWLInCodeBlocks: false,//配置生成的code是否最后生成一个\n
                    //noHeaderId: true//是否禁用h1-h7生成id
                    prefixHeaderId: 'bt-',//设置h1-h7的的id（会进行自增，默认为title，第二个为title1）

                    /*
                        启用从降级语法中设置图像尺寸
                        ![foo](foo.jpg =100x80)     100*80px
                        ![bar](bar.jpg =100x*)      设置height为"auto"
                        ![baz](baz.jpg =80%x5em)    width=80%,height=5em
                    */
                    parseImgDimensions: true,
                    /*
                        是否自动转换站点
                        www.said.com => <a href="www.said.com">www.said.com</a>
                    */
                    //simplifiedAutoLink: false,

                    /*
                        支持删除线
                        ~~said~~  => <del>said</del>
                    */
                    strikethrough: true,

                    /*
                        支持表格
                        | h1    |    h2   |      h3 |
                        |:------|:-------:|--------:|
                        | 100   | [a][1]  | ![b][2] |
                        | *foo* | **bar** | ~~baz~~ |
                    */
                    tables: true,

                    //tablesHeaderId: true,//为表格的表格头设置一个表格ID

                    //smoothLivePreview: true//防止在实时预览输入中，由于不完整输入造成显示起来怪异的影响

                    //smartIndentationFix: true//（尝试修复）当涉及到ES6模板字符串中缩进代码的格式

                }),
                    checkEmptyValue = function (key, title, summary) {
                        if (!vmSaid[key]) {
                            sweetalert(title, summary, "warning");
                            return false;
                        }
                        return true;
                    },
                    encode = function (value) {
                        return encodeURIComponent(value == null ? '' : value);
                    },
                    errorHash = {
                        'sTitle': ['（￣工￣lll） 文章标题不正确', '你忘记填写文章标题了... '],
                        'sContext': ['(｡☉౪ ⊙｡)  文章正文不正确', '大哥你连正文都木有发表了文章谁看啊...赶紧检查一下  '],
                        'sImg': [' (≖ ‿ ≖)✧ 文章插图不正确', 'Said规定所有的文章必须要有灵犀又生动的插图哟...赶紧挑张图片让文章更加的精彩'],
                        'sSummary': [' (￣▽￣)~* 文章描述不正确', '文章描述是一定要有的，没有文章描述诱惑，别人也许就不会读文章了'],
                    };



                var vmSaid = avalon.define({
                    $id: 'said',
                    saidId: '@Model.SaidId',
                    sTitle: '',
                    sTag: '',
                    sSummary: '',
                    sReprint: '',
                    sScript: '',
                    sIsTop: '',
                    sCSS: '',
                    sContext: '',
                    sImg: '',
                    sName: '',
                    classify: '',
                    checkFile: false,
                    submitState: false,
                    $skipArray: ['sTag'],
                    checkFileName: function () {
                        //考虑性能，DOM缓存
                        var $cache, key = 'bName';
                        return function (elem, value) {
                            !$cache && ($cache = $(elem).tooltip({ trigger: 'manual' }));
                            vmSaid.checkFile = !!(value && ~DataCenter.files.indexOf(value.toLowerCase()));
                            $cache.tooltip(vmSaid.checkFile ? 'show' : 'hide');
                        }
                    }(),
                    check: function () {
                        var temp;
                        return ['sTitle', 'sContext', 'sImg', 'sSummary'].every(function (key) {
                            temp = errorHash[key];
                            return checkEmptyValue(key, temp[0], temp[1]);
                        });
                    },
                    reset: function () {
                        setTimeout(function () {
                            window.location.href = '/Back/Said';
                        }, 1000);
                    },
                    submit: function (isPrivate) {
                        //锁定按钮状态
                        if (vmSaid.submitState) return;
                        if (!(vmSaid.submitState = vmSaid.check())) return;
                        if (!vmSong.songId) {
                            sweetalert('没有歌曲id', '请选择正确的歌曲信息', "warning");
                            return;
                        }
                        if (!vmSaid.sImg) {
                            sweetalert('没有文章缩略图', '请上传正确的文章缩略图', "warning");
                            return;
                        }
                        //said.dialog(converter.makeHtml(vmSaid.sContext));
                        vmSaid.submitState = true;

                        var sSummary = vmSaid.sSummary.split('\n').map(function (item) {
                            return '<p>' + item + '</p>';
                        }).join('');

                        said.ajax(Action.form, {
                            'SaidId': vmSaid.saidId,
                            'STitle': encode(vmSaid.sTitle),
                            'SSummary': encode(vmSaid.sSummary),
                            'SSummaryTrim': encode(sSummary),
                            'SHTML': encode(converter.makeHtml(vmSaid.sContext)),
                            'SReprint': encode(vmSaid.sReprint || false),
                            'SScript': encode(vmSaid.sScript),
                            'SIsTop': encode(vmSaid.sIsTop || false),
                            'SCSS': encode(vmSaid.sCSS),
                            'SongId': encode(vmSong.songId),
                            'SContext': encode(vmSaid.sContext),
                            'ImageId': encode(vmSaid.sImg),
                            'IsPrivate': isPrivate ? 1 : 0,//是否私有
                            'SName': encode(vmSaid.sName),
                        }).done(function (data) {
                            if (!data.code) {//done
                                sweetalert({
                                    title: '修改成功',
                                    text: so.format('喜大普奔，修改文章《${0}》成功', vmSaid.sTitle),
                                    type: "success"

                                }, function () {
                                    vmSaid.reset();
                                });
                            } else {
                                sweetalert({
                                    title: "数据异常",
                                    text: so.format('修改异常，异常代码 - ${1}${0}', data.msg.split(',').map(function (msg) {
                                        return '<p>' + msg + '</p>';
                                    }).join(''), data.code),
                                    html: true,
                                    type: "error"
                                });
                            }

                        }).fail(function (data) {
                            sweetalert("服务器异常", so.format('修改异常，异常代码：${0}（${1}）', data.status, data.statusText), "error");
                        }).always(function () {
                            vmSaid.submitState = false;
                        });

                    }
                });




                var vmSong = avalon.define({
                    $id: 'song',
                    songId: '',
                    songArtist: '',
                    songAlbum: '',
                    songFileName: '',
                    songName: '',
                    songImg: '',
                    imgSrc: '',
                    groupInput: {
                        datas: DataCenter.songs,
                        zIndex: 4,
                        custom: false,
                        values: localSongData,
                        callback: function (value) {
                            //选择了歌曲
                            if (value && value.data) {
                                var songData = value.data;
                                //找到了歌曲信息
                                vmSong.songId = songData.id;
                                vmSong.songArtist = songData.artist;
                                vmSong.songAlbum = songData.album;
                                vmSong.songFileName = songData.fileName;
                                vmSong.songImg = songData.img;
                                vmSong.imgSrc = Source.songImg + songData.img;
                            } else {
                                //database.val('song.id', '');
                                vmSong.songId = vmSong.songArtist = vmSong.songAlbum = vmSong.songFileName = vmSong.songImg = vmSong.imgSrc = '';
                            }
                        }
                    }
                });



                //upload

                var _summaryDialog = $.source({
                    loadUrl: '/Back/Image/GetImagesList',
                    path: Source.summaryImg,
                    type: Source.saidImageType,
                    uploadUrl: Action.uploadSaidImg,
                    deleteUrl: '/Back/Source/RealDeleteImage',//这个是物理删除，测试用这个
                    multiple: false,
                    //deleteUrl: Action.deleteImage, //这个是逻辑删除，上线用这个
                    callback: function (data) {
                        vmUpload.data = data;
                        var imgSrc = Source.summaryImg + data.IName;
                        vmUpload.img = data.IName;
                        vmUpload.imgSrc = imgSrc;
                        vmSaid.sImg = data.ImageId;
                        //database.val('sImg', data.ImageId).val('summary.imgSrc', imgSrc);
                    }
                });
                var vmUpload = avalon.define({
                    $id: 'uploadController',
                    imgSrc: '',
                    $skipArray: ['img'],
                    dialog: function (id) {
                        _summaryDialog.show();
                    },
                    clear: function () {
                        //database.remove('sImg')
                        //database.remove('summary.imgSrc');
                        vmSaid.sImg = null;
                        vmUpload.imgSrc = vmUpload.img = '';
                    }
                });

                avalon.scan();

                //var temp = Object.keys(vmSaid.elem).map(function (key, value) {
                //    return key.split('-')[0];
                //});
                //console.log(temp);

                //还原要编辑的数据
                ["sTitle", "sContext", "sSummary", "sName", "sScript", "sCSS", "sReprint", "sIsTop"].forEach(function (propertiePrefixName) {
                    var elem = vmSaid.elem[propertiePrefixName + '-h'];
                    if (elem && elem.value.length)
                        vmSaid[propertiePrefixName] = (propertiePrefixName == 'sIsTop' || propertiePrefixName == 'sReprint') ? elem.value === 'True' ? true : false : elem.value;
                });


                //图片单独处理
                //["ImageId", "IFileName"];
                if (vmSaid.elem['ImageId-h']) {
                    var imgSrc = Source.summaryImg + vmSaid.elem['IFileName-h'].value;
                    vmUpload.img = vmSaid.elem['IFileName-h'].value;
                    vmUpload.imgSrc = imgSrc;
                    vmSaid.sImg = vmSaid.elem['ImageId-h'].value;
                }

                //歌曲单独处理
                var localSongData = [];
                if (vmSaid.elem["SongId-h"]) {
                    var songId = vmSaid.elem["SongId-h"].value;
                    so.each(DataCenter.songs, function (item) {
                        if (item.data.id === songId) {
                            localSongData.push(item);
                        }
                    });
                }
                if (localSongData.length) {
                    vmSong.songId = localSongData[0].data.id;
                    vmSong.songArtist = localSongData[0].data.artist;
                    vmSong.songName = localSongData[0].data.name;
                    vmSong.songAlbum = localSongData[0].data.album;
                    vmSong.songFileName = localSongData[0].data.fileName;
                    vmSong.songImg = localSongData[0].data.img;
                    vmSong.imgSrc = Source.songImg + localSongData[0].data.img;
                }
            });
        });
    </script>
}