@model Said.Models.Article
@{
    ViewBag.Title = "添加Said";
    Layout = "~/Areas/Back/Views/Shared/_LayoutBack.cshtml";
    var ClassifysList = ViewData["ClassifysList"] as IList<Said.Models.Classify>;
    var SongsList = ViewData["SongsList"] as IList<Said.Models.Song>;
}
<div class="page-header">
    <h3>添加Said&nbsp;&nbsp;<small>&gt;添加一篇Said</small></h3>
</div>
<ol class="breadcrumb">
    <li><a href="#">Home</a></li>
    <li><a href="#">Siad管理</a></li>
    <li class="active">添加Said</li>
</ol>
<div class="main-context">
    <div class="modal fade" id="upStates">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal"><span aria-hidden="true">&times;</span><span class="sr-only">Close</span></button>
                    <h4 class="modal-title">Modal title</h4>
                </div>
                <div class="modal-body">
                    <p>One fine body&hellip;</p>
                </div>
            </div>
        </div>
    </div>
    @using (Html.BeginForm("AddSaid", "Said", FormMethod.Post, new { spellcheck = "spellcheck", name = "saidForm", novalidate = "novalidate", OnSubmit = "return false;" }))
    {
        <div class="said-article">
            <div class="said-title-con">
                @Html.TextBoxFor(Model => Model.STitle, new Dictionary<string, object>() { { "class", "said-title" }, { "autocomplete", "off" }, { "placeholder", "文章标题" }, { "required", "" }, { "data-validate", "" }, { "data-check", "said.error" } })
            </div>
            <div class="said-context-content">
                <!-- said-error-->
                @Html.TextAreaFor(Model => Model.SContext, new Dictionary<string, object>() { { "class", "said-context" }, { "autocomplete", "off" }, { "placeholder", "这中间有个said的水印图啊，在bootstrap见过一个【缩略语】的排版，非常奈斯啊啊！！！！" }, { "required", "" }, { "data-validate", "" }, { "data-check", "said.error" } })
            </div>
            <button class="btn btn-lg said-priview center-block" id="previewSaid" type="button">预览</button>
        </div>
        <div class="row said-view-container">
            <div class="col-md-6">
                <div class="panel panel-default relative-container">
                    @*  <div class="said-mask" id="uploadSong">
                            <span>上传歌曲</span>
                            <div class="progress">
                                <div style="width: 0;" aria-valuemax="100" aria-valuemin="0" aria-valuenow="20" role="progressbar" class="progress-bar progress-bar-info"></div>
                            </div>
                            @Html.TextBoxFor(Model => Model.Song.SongId, new { @class = "hidden-file", type = "file" })
                        </div>*@
                    <div class="panel-heading">歌曲</div>
                    <div class="panel-body" id="songModel">
                        <div class="afterClear">
                            <div class="col-md-4">
                                <div class="music-img">
                                    <div class="thumbnail">
                                        @Html.TextBoxFor(Model => Model.Song.SongImg, new { @class = "song-Upload", type = "file" })
                                        <img src="../../Content/Images/UEDImg/demo-img6.jpg" id="songImg" />
                                    </div>
                                </div>
                            </div>
                            <div class="music-info col-md-8">
                                <div class="input-group">
                                    <span class="input-group-addon">歌曲</span>
                                    <div class="queryInputBar">
                                        @Html.TextBoxFor(Model => Model.Song.SongName, new Dictionary<string, object>() { { "class", "form-control music-input" }, { "autocomplete", "off" }, { "placeholder", "歌曲名称" }, { "required", "" }, { "data-validate", "" }, { "data-check", "said.query" } })
                                    </div>
                                </div>
                                <div class="input-group">
                                    <span class="input-group-addon">专辑</span>
                                    @Html.TextBoxFor(Model => Model.Song.SongAlbum, new { @class = "form-control music-input", placeholder = "歌曲专辑", autocomplete = "off", required = "required", validate = "" })
                                </div>
                                <div class="input-group">
                                    <span class="input-group-addon">歌手</span>
                                    @Html.TextBoxFor(Model => Model.Song.SongArtist, new { @class = "form-control music-input", placeholder = "艺术家", autocomplete = "off"/*, required = "required", validate = ""*/ })
                                </div>
                                <div class="input-group" data-ng-class="has-error">
                                    <span class="input-group-addon">文件</span>

                                    @Html.TextBoxFor(Model => Model.Song.SongFileName, new Dictionary<string, object>() { { "class", "form-control music-input" }, { "autocomplete", "off" }, { "placeholder", "文件名，为空则自动生成" }, { "data-toggle", "tooltip" }, { "data-placement", "top" }, { "title", "该文件名已经存在" } })
                                </div>
                                <div class="songOp-btn">
                                    <button type="button" class="btn btn-danger songBtn" id="songDelete" data-ng-click="ac.deleteImg()">删除</button>
                                </div>
                                <div class="songOp-btn song-up-content">
                                    @Html.TextBoxFor(Model => Model.Song.SongId, new { @class = "song-Upload", type = "file", id = "addSongFile" })
                                    <button type="button" class="btn btn-primary songBtn" id="addSong" data-ng-click="ac.deleteImg()">添加</button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="panel panel-default relative-container">
                    <div class="said-mask" id="uploadImg">
                        <span>上传缩略图</span>
                        <div class="progress">
                            <div style="width: 0;" aria-valuemax="100" aria-valuemin="0" aria-valuenow="20" role="progressbar" class="progress-bar progress-bar-info"></div>
                        </div>
                        @Html.TextBoxFor(Model => Model.SImg, new { @class = "hidden-file", type = "file" })
                    </div>
                    <div class="panel-heading">描述</div>
                    <div class="panel-body">
                        <div class="col-md-4">
                            <div class="music-img">
                                <div class="thumbnail">
                                    <img src="../../Content/Images/test-said-img.jpg" id="summaryImg" />
                                </div>
                            </div>
                        </div>
                        <div class="col-md-8">
                            @Html.TextAreaFor(Model => Model.SSummary, new Dictionary<string, object>() { { "class", "said-dis" }, { "autocomplete", "off" }, { "placeholder", "简介[支持HTML]" }, { "required", "" }, { "data-validate", "" }, { "data-check", "said.error" } })
                            <div class="songOp-btn song-up-content">
                                <button type="button" class="btn btn-danger songBtn" id="summaryImgDelete">删除</button>
                            </div>
                        </div>

                    </div>
                </div>
            </div>
            <div class="col-md-6">
                <div class="panel panel-default">
                    <div class="panel-heading">附加信息</div>
                    <div class="panel-body">
                        <div class="input-group">
                            <span class="input-group-addon">标签</span>
                            <div class="queryInputBar tagInputBar form-control">
                                <div class="tag-selected"></div>
                                @Html.TextBox("StagInput", string.Empty, new Dictionary<string, object>() { { "class", "tag-input" }, { "autocomplete", "off" }, { "placeholder", "标签，支持[、,.]分隔" } })
                                @*@Html.TextBoxFor(Model => Model.STag, new Dictionary<string, object>() { { "class", "tag-input" }, { "name", "StagInput" }, { "autocomplete", "off" }, { "placeholder", "标签，支持[、,.]分隔" } })*@
                            </div>
                        </div>
                        <div class="input-group">
                            <span class="input-group-addon">分类</span>
                            <div class="queryInputBar">
                                @Html.TextBoxFor(Model => Model.Classify.CName, new Dictionary<string, object>() { { "class", "form-control" }, { "autocomplete", "off" }, { "placeholder", "分类名称" }, { "required", "" }, { "data-validate", "" }, { "data-check", "said.query" } })
                            </div>
                        </div>
                    </div>
                    <div class="panel-heading panel-subTitle">可选信息</div>
                    <div class="panel-body">
                        <div class="input-group">
                            <span class="input-group-addon">文件</span>
                            @Html.TextBoxFor(Model => Model.SName, new Dictionary<string, object>() { { "class", "form-control" }, { "autocomplete", "off" }, { "placeholder", "文章发布的（文件）名称,为空自动生成" }, { "data-toggle", "tooltip" }, { "data-placement", "top" }, { "title", "该文件名已经存在" } })
                        </div>
                        <div class="form-group">
                            <label>JavaScript</label>
                            @Html.TextAreaFor(Model => Model.SScript, new { @class = "form-control", placeholder = "自定义JavaScript", autocomplete = "off" })
                        </div>
                        <div class="form-group">
                            <label>CSS</label>
                            @Html.TextAreaFor(Model => Model.SCSS, new { @class = "form-control", placeholder = "自定义CSS", autocomplete = "off" })
                        </div>
                        <div class="checkbox said-checkbox">
                            <label>
                                @*@Html.CheckBoxFor(Model => Model.SReprint, new { @type = "checkbox" })如果是直接提交表单，则可以直接采用checkbox控件，会生成两个input，具体请查阅：http://www.cnblogs.com/freeliver54/archive/2013/05/10/3070384.html*@
                                @Html.TextBoxFor(Model => Model.SReprint, new { @type = "checkbox" })是否转载
                            </label>
                            <label>
                                <input type="checkbox" />
                                @Html.TextBoxFor(Model => Model.SIsTop, new { @type = "checkbox" })是否置顶
                            </label>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="submit-container">
            <div class="error-check" id="errorTip">
                发布前会进行错误检测
            </div>
            <button class="btn btn-lg said-submit center-block" id="submit" type="submit">发布</button>
            <!--data-ng-class="{'submit-lock':!saidForm.$valid}"-->
        </div>
    }
</div>
@section Css{
    <link href="@Url.Content("~/Content/Back/Style/addSaid.css")" rel="stylesheet" />
}
@*@section HeadJs{
        <script src="@Url.Content("")"></script>
    }*@
@section FootJs{
    <script type="text/javascript">
        var Action = {
            song: '/Source/SaidSong',
            img: '@Url.Action("UploadSaidImg", "Source")',
            imgLocation: '@Url.Content("~/Source/Said/Images/")',
            music: '@Url.Action("UploadMusic", "Source")',
            existsSongFile: '@Url.Action("ExistsSongFileName", "Back")',
            existsSaidName: '@Url.Action("ExistsSaidFileName", "Back")',
            form: '@Url.Action("AddSaid", "Said")'
        },
        DataCenter = {
            songs: {
                'Yellow': 'yellowcoldplay酷玩乐队',
                'My Love': 'mylovemlwestlife西城男孩',
            },
            songsData: {
                'Yellow': {
                    id: '106f168f-10f1-4459-918d-f811bc8a7fa6',
                    name: 'Yellow',
                    album: 'Yellow',
                    artist: 'Coldplay',
                    fileName: '302320154702223701.mp3',
                    img: '098920153702223601.jpg'//注意这个路径应该只是个图片名称
                },
                'My Love': {
                    id: '97279318-f809-488c-b31c-fe642acb322b',
                    name: 'My Love',
                    album: 'Coust To Coust',
                    artist: 'Westlife',
                    fileName: '484720153302224501.mp3',
                    img: '107320153502225701.png'
                }
            },
            tags: ['javascript',
                          'ECMAScript',
                          'C#',
                          '.NET',
                          'jQuery',
                          '.NET MVC',
                          'Sql Server',
                          'NodeJS',
                          'Zepto', 'requireJS', 'angularJS', 'Backbone', 'linkFly', 'bootstrap'],
            types: {
                '.NET': '6198f526-fa0f-4429-983a-bebc8439e7c8',
                'RequireJS': '271f2924-69ce-4522-8e39-cc8f31059de8',
                'jQuery': 'ac11966d-01bf-4554-bd7e-7e0a807ea8fa',
                'CSS': '817aa0f0-447e-46d3-805c-8952c0332df8',
                'ECMAScript 6': '136116aa-a5f6-4f88-bcc4-00a1b4db0dba',
                'ECMAScript 5': 'd2774f82-3f56-4b0a-b3ae-0ad203cdc510',
                'HTML': 'f6b5ec17-a053-491c-b08e-0368aa115a82',
                'JavaScript': '2e0dfa2f-dca4-4e1a-abeb-889ce98a8bb0'
            },
            classif: [
                '.NET',
                'RequireJS',
                'jQuery',
                'CSS',
                'ECMAScript 6',
                'ECMAScript 5',
                'HTML',
                'JavaScript'
            ],
            //MIME参考：http://www.w3school.com.cn/media/media_mimeref.asp
            imgFilters: ['jpg', 'jpeg', 'jpe', 'bmp', 'png', 'gif'/*, 'image/png', 'image/bmp', 'image/gif', 'image/jpeg'*/],
            musicFilters: ['mp3', 'ogg']
        };
        //除非下面的js代码也是从外层定义的，否则require.config必须定义在当前页面内，因为requireJS加载的代码都是异步的
        require.config({
            baseUrl: '/Content/Back/JavaScript',
            paths: {
                'saidAdd': 'said/addSaid',
                'avalon': 'avalon/avalon.mobile.min',
                'groupInput': 'avalon/plug/groupInput',
                'upload': 'avalon/plug/upload',
                'showMsg': 'so/plug/showMsg',
                'source': 'so/plug/source',
                'markdown': ['showdown/showdown'],
                'showDownThemeGithub': 'showdown/extensions/github'
            },
            packages: [
            {
                name: 'echarts',
                location: 'echarts-2.1.8/src',
                main: 'echarts'
            },
            {
                name: 'zrender',
                //location: 'http://ecomfe.github.io/zrender/src',
                location: 'zrender-master/src',
                main: 'zrender'
            },
            {
                name: 'so',
                location: 'so',
                main: 'so'
            },
            {
                name: 'said',
                location: 'said',
                main: 'said'
            }], shim: {
                'showDownThemeGithub': ['markdown']//依赖showdown
            }
        });

        require(['jquery', 'so', 'so/plug/search', 'avalon', 'showMsg', 'source', 'markdown', 'showDownThemeGithub', 'groupInput', 'upload'], function ($, so, Search, avalon, showMsg, source, showdown) {
            $(function () {

                avalon.scan();
            })
        });

        require(['jquery', 'so/so', 'so/plug/search', 'so/plug/validate', 'so/plug/model', 'saidAdd', 'markdown', 'showDownThemeGithub'], function ($, so, search, validate, saidModel, addSaid, showdown, github) {
            //showdown, github并非AMD库，requireJS只能保证当前这些库已经被加载完成，而不能得到加载完成的对象，所以仍然要去window环境下获取
            showdown = window.Showdown;
            $(function () {
                var _ = function (name) {
                    return document.getElementById(name);
                };
                // => form验证
                var checkFns = {
                    'said.error': function (elem, checked/*, key, value, pattern*/) {
                        checked ? elem.classList.remove('said-error') : elem.classList.add('said-error');
                    },
                    'said.query': function (elem, checked/*, key, value, pattern*/) {
                        checked ? elem.parentNode.parentNode.classList.remove('has-error') : elem.parentNode.parentNode.classList.add('has-error');
                    }
                },
                temp,
                trim = String.prototype.trim,
                each = Array.prototype.forEach,
                validateData = function (elem, checked, key, value, pattern) {
                    if (temp = checkFns[elem.dataset.check]) //特殊的样式改变
                        temp(elem, checked, key, value, pattern);
                    else//正常的样式改变
                        checked ? elem.parentNode.classList.remove('has-error') : elem.parentNode.classList.add('has-error');
                },
                formValidate = validate(window.saidForm, function (elem, checked, key, value, pattern) {  // => validate插件
                    validateData(elem, checked, key, value, pattern);
                }),
                validateProgress = function () { //表单验证进度
                    var length = formValidate.keys.length, index = 1, txt = _('errorTip'), progress = _('errorProgress');
                    return {
                        run: function (value) {
                            if (value != null)
                                index = value;
                            progress.style.width = (index++ / length * 100) + '%';
                            txt.innerHTML = index > length ? '检测完毕，重新检测请再次点击' : '检测中';
                        },
                        reset: function () {
                            index = 1;
                            progress.style.width = '0%';
                            txt.innerHTML = '点击进行错误检测';
                        },
                        toggleClass: function (className) {
                            progress.className = className;
                        },
                        state: function () {
                            return index === 1 ? false : true;
                        }
                    }
                }();

                //页面弹窗：
                var dialog = function (model) {
                    var titleElem = model.find('.modal-title')[0],
                        body = model.find('.modal-body')[0];
                    return function (title, context) {
                        if (title != null)
                            titleElem.innerHTML = title;
                        if (context != null)
                            body.innerHTML = context;
                        return model.modal('show');
                    };

                }($('#upStates'));

                // => 页面交互元素 => Model插件
                var model = saidModel(window.saidForm),//根据表单构建表单Model，源于so.model
                    submitBtn = _('submit');

                //代码预览，返回当前文章正文的HTML
                var getContextHTML = function (btn, titleDOM, contextDOM) {
                    var converter = new showdown.converter({ extensions: ['github'] });//页面markdown转换器=>来自showDown.js
                    btn.addEventListener('click', function () {
                        addSaid.Preview(titleDOM.value, converter.makeHtml(contextDOM.value));
                    });
                    return function () {
                        return converter.makeHtml(contextDOM.value);
                    };
                }(_('previewSaid'), model.get('STitle'), model.get('SContext'));

                // => 保存到本地数据库
                var save = function () {
                    model.each(function (name, value) {
                        if (value)
                            addSaid.DataBase.val(name, value);
                    });
                    //保存标签
                    if (Song.isUpload()) {
                        var songValue = Song.val();
                        if (songValue.id) {//选中了歌曲数据
                            addSaid.DataBase.val('Song.SSongId', songValue.id);
                            addSaid.DataBase.val('Song.SongImg', songValue.img);
                        }
                    }
                    if (TagSelect.checked()) {
                        addSaid.DataBase.val('STags', TagSelect.val().join(','));
                    }
                    if (temp = ClassifyValue.val()) {
                        addSaid.DataBase.val('Classify.ClassifyId', temp);
                    }
                },
                readDataBase = function () {//从本地数据库读取数据
                    var database = addSaid.DataBase;
                    var specialStr = ['SImg', 'Song.SongImg', 'Song.SongId'].join(),//图片文件无法还原
                        value;;
                    model.each(function (name) {
                        //if (specialSet(name, value)) return;
                        if (~specialStr.indexOf(name)) return;
                        value = database.val(name);
                        if (value != null) {
                            model[name] = value;
                        }
                    });
                    //在标签构造函数完成之前把标签默认值的数据准备好
                    if (value = database.val('STags')) {
                        //还原标签默认值
                        tagSelectDefaultValues = value.split(',');
                    };
                    //如果有歌曲选中的默认值
                    if (database.val("Song.SSongId"))
                        songSelectValue = { id: database.val("Song.SSongId"), img: database.val("Song.SongImg") };
                    if (temp = database.val('Classify.ClassifyId')) {
                        classifyDefaultData = temp;
                    }
                    return database;
                }();



                // => 构建标签模型
                var tagSelectDefaultValues,//标签默认值
                    TagSelect = function (elem, data, def) {
                        // => tag的选择需要针对search插件进行组合
                        var templent = '<label><span>${0}</span><a href="javascript:;" class="_tag-selectItem">×</a></label>',
                            value = [],
                            parentNode = elem.parentNode.parentNode,
                            format = so.format,
                            content = elem.previousElementSibling,//生成标签的容器
                            tmp,//临时使用变量
                            insertTag = function (name) {
                                //创建一个tag
                                if (!name || value.indexOf(name) !== -1) return false;
                                content.insertAdjacentHTML('beforeEnd', format(templent, name));
                                value.push(name);
                                return true;
                            },
                            checkState = function () {
                                return value.length === 0 ?
                                    (parentNode.classList.add('has-error'), false) :
                                    (parentNode.classList.remove('has-error'), true);
                            };
                        if (Array.isArray(def)) {
                            //有默认值则处理默认值
                            var html = [];
                            def.forEach(function (value) {
                                html.push(so.format(templent, value));
                            });
                            content.innerHTML = html.join('');
                            value = def;
                            html = null;
                        }
                        content.addEventListener('click', function (e) {
                            //删除标签
                            if (e.target.className === '_tag-selectItem') {
                                tmp = e.target.previousElementSibling;
                                value.splice(value.indexOf(tmp.innerHTML), 1);
                                tmp.parentNode.remove();//js什么时候有了remove()方法？？
                            }
                        });
                        elem.addEventListener('keydown', function (e) {
                            switch (e.keyCode) {
                                case 9://tab
                                    //case 32://空格
                                case 188://,
                                case 190://.
                                    //case 9 | 32 | 188 | 190:
                                    //位枚举学的不好啊 囧....
                                    if (trim.call(elem.value) === '') {
                                        checkState();
                                        return;
                                    };
                                    e.preventDefault();
                                    insertTag(elem.value);
                                    checkState();
                                    elem.value = '';
                                    break;
                                case 8://backSpace
                                    //case 46://delete
                                    if (value.length && trim.call(elem.value) === '') {
                                        value.pop();
                                        content.lastElementChild.remove();
                                        checkState();
                                    }
                                    break;
                                default:
                                    break;
                            }
                        });
                        search(elem, data, function (inputValue, selectValue) {
                            insertTag(selectValue);
                            checkState();
                            return '';
                        }, function () {
                            checkState();
                        })
                        return {
                            check: function () {
                                //检测是否错误，返回检测结果，同时修改样式
                                return checkState();
                            },
                            checked: function () {
                                //检测错误
                                return value.length !== 0;
                            },
                            val: function () {
                                //获取选中项的值
                                return value;
                            }
                        };
                    }(model.get('StagInput'), DataCenter.tags, tagSelectDefaultValues);

                // => 构建分类模型，分类直接采用search
                var classifyDefaultData,
                    ClassifyValue = function (elem, data, filters, defaultData) {
                        //[DOM，数据中心（选择id），sugg数据]
                        var value = defaultData || '';
                        search(elem, filters, {
                            def: '没有检索到相关信息',
                            callback: function (inputValue, selectValue) {
                                //分类的选择相对简单
                                value = data[selectValue];
                                return selectValue;
                            }
                        });
                        return {
                            val: function (newValue) {
                                if (newValue != null)
                                    value = newValue;
                                return value;
                            }
                        };
                    }(model.get('Classify.CName'), DataCenter.types, DataCenter.classif, classifyDefaultData);

                var //异步文本框检测对象
                ajaxCheckExists = function (model, actionUrl, isOnceCheck) {//'Song.SongFileName'
                    var fileNameCheck = true,//默认为空的话让它通过，因为服务器可以生成文件名
                       fileNameOldValue = '',//上一次文件名输入的值
                       fileNameOldCheckResult = false,//上一次文件名校验结果
                       $model = $(model).tooltip({ trigger: 'manual' }),//输入框
                       temp;
                    $model.blur(function () {//注册blur事件
                        temp = this.value.trim();
                        if (temp) {
                            if (temp !== fileNameOldValue) {//如果跟上一次的值一致，则不再异步加载
                                fileNameOldValue = temp;
                                var data = new FormData();
                                data.append('fileName', this.value.trim());
                                addSaid.ajax(data, actionUrl, function (data) {
                                    if (data.code === 0) {//证明该文件已经存在
                                        fileNameOldCheckResult = fileNameCheck = true;
                                    } else {
                                        $model.tooltip('show');
                                        fileNameOldCheckResult = fileNameCheck = false;
                                        validateData(model, false);
                                    }
                                });//加载失败
                            } else {
                                //有上一次的校验结果，采用上一次的校验结果
                                $model.tooltip(fileNameOldCheckResult ? 'hide' : 'show');
                                validateData(model, fileNameOldCheckResult);
                            }
                        } else {
                            //没有值的话则默认通过
                            validateData(model, fileNameCheck = true);
                        }
                    }).on('input', function () {
                        fileNameCheck = this.value.trim() !== fileNameOldValue;
                        $model.tooltip('hide');
                    });
                    if (isOnceCheck !== false)
                        if ($model.val().trim())
                            $model.blur();
                    return {
                        check: function () {
                            return fileNameCheck;
                        },
                        val: function (value) {
                            if (value)
                                return $model.val(value).blur();
                            return $model.val();
                        }
                    };
                };

                // => 构建歌曲模型
                //{mask:蒙板DOM,img:Img存放DOM, del:删除按钮, songs:歌曲,models：模型对象, model:初始化模型对象}
                var uploadErrorHandle = function (error, data) {
                    switch (error.code) {
                        case 1:
                        case 2:
                        case 4:
                            dialog('上传异常', error.msg);
                            break;
                        case 3:
                        default:
                            dialog('服务器异常', '服务器响应异常');
                            break;
                    }
                },
                // =-> 歌曲上传
                songSelectValue,
                Song = function (imgMask, img, addButton, del, imgAction, fileAction, imgFilters, musicFilters, songs, models, model, defaultData) {
                    // = > 上传图片
                    var imgUpload = addSaid.Upload(imgMask, imgAction, imgFilters, function (data) {
                        if (data.error === 0) {//ok
                            img.src = Action.imgLocation + (imgName = data.name);
                        } else {
                            dialog('上传歌曲图片异常，服务器响应：', data.msg);
                            imgUpload.toggle(false);
                        }
                    }, uploadErrorHandle),
                    // = > 上传歌曲
                        musicFileName,
                        addBtnDOM = addButton.parentNode,
                        fileUpload = addSaid.Upload(addButton, fileAction, musicFilters, function (data) {
                            if (data.error === 0) {//上传歌曲成功
                                musicFileName = data.name;
                            } else {
                                dialog('上传歌曲文件异常，服务器响应：', data.msg);
                                fileUpload.toggle(false);
                            }
                        }, uploadErrorHandle, 6291456),//最大6mb
                        imgName,//上传或suggestion选中项的图片名称
                        tmpModel,//suggestion选中项的model
                        selectData = false,//sugg选中的数据
                        //文件名校验相关
                        fileNameCheck = false,//文件名验证是否通过
                        fileNameOldValue = '',//上一次文件名输入的值
                        fileNameOldCheckResult = false,//上一次文件名校验结果
                        searchDOM = model.get('Song.SongName'),//选中项id，如果为false则表示不是选中项的数据
                        songDOMs = ['Song.SongName', 'Song.SongAlbum', 'Song.SongArtist'].map(function (name) {
                            //和歌曲相关联的DOM
                            return model.get(name);
                        });
                    //songName的search()suggestion事件绑定之前绑定
                    songDOMs.forEach(function (elem) {
                        elem.addEventListener('input', function () {
                            validateData(this, !!this.value.trim());
                            selectData = false;//编辑过表示不是选中项
                            //是不是这里不清空selectData，让服务器对比数据，如果有改动则插入，否则还是直接引用
                        });
                    });
                    var songName = search(searchDOM, songs, function (inputValue, value) {//从数据列表中选中
                        validateData(searchDOM, !!searchDOM.value.trim());
                        tmpModel = models[value];
                        model['Song.SongName'] = tmpModel.name;//直接赋值即可映射到DOM
                        model['Song.SongAlbum'] = tmpModel.album;
                        model['Song.SongArtist'] = tmpModel.artist;
                        model['Song.SongFileName'] = tmpModel.fileName;
                        songDOMs.forEach(function (elem) {
                            validateData(elem, !!elem.value.trim());
                        });
                        img.src = Action.imgLocation + (imgName = tmpModel.img);//保存选中的图片信息
                        selectData = tmpModel.id;//获取选中项id
                        lock();//选择了歌曲就锁住
                        addBtnDOM.style.display = 'none';
                        return value;
                    }, function () {
                        lock(false);
                        addBtnDOM.style.display = '';
                        musicFileName = selectData = false;
                    }),
                      lock = function (isLock) {
                          var method = isLock === false ? 'removeAttribute' : 'setAttribute';
                          ['Song.SongAlbum', 'Song.SongArtist', 'Song.SongFileName'].forEach(function (name) {
                              model.get(name)[method]('disabled', 'disabled');
                          });
                      },
                      reset = function () {
                          model['Song.SongName'] = model['Song.SongAlbum'] = model['Song.SongArtist'] = model['Song.SongFileName'] = '';
                          img.src = "../../Content/Images/UEDImg/demo-img6.jpg";
                          lock(false);
                          addBtnDOM.style.display = '';
                          musicFileName = tmpModel = imgName = false;
                          imgUpload.toggle();
                      };
                    if (defaultData) {//如果历史数据有选中的歌曲信息
                        lock();
                        selectData = defaultData.id;
                        img.src = Action.imgLocation + (imgName = defaultData.img);
                    }
                    del.addEventListener('click', function () {
                        reset();
                    });
                    return {
                        //检测文件名校验是否通过
                        nameCheck: function () {
                            return fileNameCheck;
                        },
                        //检测是否是上传的信息
                        isUpload: function () {
                            return !!selectData;
                        },
                        check: function () {
                            //也没有上传图片歌曲信息，也没有选择项
                            return !!((imgName && musicFileName) || selectData);
                        },
                        val: function () {
                            return { img: imgName, name: musicFileName, id: selectData };
                        },
                        reset: reset
                    };
                }('Song_SongImg', _('songImg'), _('addSongFile'), _('songDelete'), Action.img, Action.music, DataCenter.imgFilters, DataCenter.musicFilters, DataCenter.songs, DataCenter.songsData, model, songSelectValue);
                // => 缩略图
                var SumImg = (function (mask, img, action, del, filters, def) {
                    var value,
                        reset = function () {
                            img.src = '../../Content/Images/test-said-img.jpg';
                            value = null;
                            upload.toggle();
                        },
                        upload = addSaid.Upload(mask, action, filters, function (data, state) {
                            //上传的value
                            if (data.error === 0) {//ok
                                img.src = Action.imgLocation + (value = data.name);
                            } else {
                                upload.toggle(false);
                                dialog('上传缩略图异常，服务器响应：', data.msg);
                            }
                        }, uploadErrorHandle);

                    del.addEventListener('click', reset);
                    if (def)
                        img.src = Action.imgLocation + (value = def);
                    return {
                        val: function () {
                            return value;
                        },
                        reset: reset
                    };
                })(_('uploadImg'), _('summaryImg'), Action.img, _('summaryImgDelete'), DataCenter.imgFilters),
                //文件名异步检测
                    fileNameSongNameModel = ajaxCheckExists(model.get('Song.SongFileName'), Action.existsSongFile, !songSelectValue),
                    fileNameSaidModel = ajaxCheckExists(model.get('SName'), Action.existsSaidName);

                /*
                    代码优化点：
                    1、逻辑稳定，主要逻辑抽离到addSaid中,页面逻辑并不是很好，需要大调整，例如歌曲那里，选择歌曲很混乱，要考虑要单独选择一个以前有过的图片但是歌曲是新增的怎么办？增加一个按钮？
                    2、不要采用var赋值的方式，有些方法需要依赖变量提升，所以使用!function name(){}();来强制变量提升
                    3、图片相关逻辑大幅度优化，可以从图片库中选取
                    4、统一api，不要太混乱
                */

                //发布
                changeState = function (logDOM) {
                    var lock = false, change = function (mothed, text) {
                        if (arguments.length === 2)
                            submitBtn.classList[mothed]('submit-lock');
                        else
                            text = mothed;
                        submitBtn.innerHTML = text;
                    };
                    return function (state) {
                        switch (state) {
                            case 0://lock
                                lock = true;
                                change('add', '检测中');
                                break;
                            case 1://error
                                lock = false;
                                change('remove', '发布');
                                break;
                            case 2://submiting
                                change('提交中');
                                break;
                            case 3://success
                                lock = false;
                                change('remove', '发布');
                                break;
                            default:
                                return lock;
                                break;
                        }
                        return false;
                    }
                    submitBtn.innerHTML = text;
                }(_('errorTip'));
                //form提交
                submitBtn.addEventListener('click', function () {
                    //console.log(formValidate);
                    save();
                    if (changeState()) return false;
                    changeState(0);
                    var checkResult = formValidate.test(function (elem, checked, key, value, pattern) {
                        //console.log(elem, checked, key, value, pattern);
                        validateData(elem, checked, key, value, pattern);
                    });
                    if (!checkResult) {
                        //检测完毕，如果有错误应该清空检测进度，需要调整
                        changeState(1);
                        return changeState(1);
                    } else {
                        //默认检测通过，检测特殊项：歌曲、缩略图和标签
                        if (!Song.check()) {
                            dialog('歌曲信息错误', '请上传歌曲图片、歌曲文件或选择正确的歌曲信息');
                            return changeState(1);
                        }
                        //检测异步信息
                        if (!fileNameSongNameModel.check()) {
                            dialog('歌曲文件信息错误', '请填写没有冲突的歌曲文件信息');
                            return changeState(1);
                        }
                        if (!fileNameSaidModel.check()) {
                            dialog('文章文件名错误', '请填写没有冲突的文章文件名信息');
                            return changeState(1);
                        }

                        //检测标签
                        if (!TagSelect.check()) {
                            errorLog(false);
                            return changeState(1);
                        }
                        //检测缩略图
                        if (!SumImg.val()) {
                            dialog('缩略图错误', '请上传正确的缩略图');
                            SumImg.reset();
                            return changeState(1);
                        }
                        //至此检测完毕===========================
                        changeState(2);
                        lock = true;
                        var data = new FormData(),//表单值
                            songData = Song.val();//歌曲值
                        model.each(function (name, value) {
                            if (name !== 'SContext')//文章正文(标题需要么？)特殊处理，.net默认存在request.form安全检测，为了防止xss攻击建议保留这个安全检测
                                data.append(name, value);
                        });
                        data.append('SContext', encodeURIComponent(model.get('SContext').value));//文章源码
                        data.append('SHTML', encodeURIComponent(getContextHTML()));//文章HTML源码
                        //缩略图
                        data.append('SImg', SumImg.val());
                        //标签
                        data.append('STag', TagSelect.val().join(','));
                        //分类
                        data.append('Classify.ClassifyId', ClassifyValue.val());
                        //data.SHTML = '';
                        if (songData.id) {
                            //选择了歌曲，而不是新增歌曲
                            data.append('Song.SSongId', songData.id);
                        } else if (songData.img) {
                            //上传||suggestion选择了图片后，编辑了歌曲
                            data.append('Song.SongImg', songData.img);
                        }
                        addSaid.DataBase.clear();
                        return;
                        addSaid.ajax(data, Action.form, function (data, xhr) {
                            if (data.code === 0) {
                                dialog('添加Said成功', '喜大普奔，添加Said成功。');

                                //解决chrome下依赖加载报错的bug... TODO
                                changeState(1);
                            } else {
                                dialog('服务器返回异常', data.msg.split(',').map(function (msg) {
                                    return '<p>' + msg + '</p>';
                                }).join('') + '<p>如果您觉得本次异常不合情理，请点击<a class="submitBug" href="javascript:;">反馈异常</a>，将跟踪此次异常。</p>');
                                changeState(1);
                            }
                        }, function () {
                            changeState(1);
                            dialog('连接服务器异常', '<p>请检查您的网络信息</p><p>如果您觉得本次异常不合情理，请点击<a class="submitBug" href="javascript:;">反馈异常</a>，将跟踪此次异常。</p>');
                        });
                    }
                });
            });
        });
    </script>
}