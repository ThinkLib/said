@using Said.Common;
@model Said.Models.Article
@{
    ViewBag.Title = "添加Said";
    Layout = "~/Areas/Back/Views/Shared/_LayoutBack.cshtml";
    var ClassifysList = ViewData["ClassifysList"] as IList<Said.Models.Classify>;
    var SongsList = ViewData["SongsList"] as IList<Said.Models.Song>;
}
<div class="page-header">
    <h3>添加Said&nbsp;&nbsp;<small>&gt;添加一篇Said</small><a href="javascript:;" id="said-help-btn" title="帮助"><i class="fa fa-question-circle"></i></a></h3>
</div>
<ol class="breadcrumb">
    <li><a href="#">Home</a></li>
    <li><a href="#">Siad管理</a></li>
    <li class="active">添加Said</li>
</ol>
<div id="said-help" class="said-mask-content said-watermark">
    <ul>
        <li>Said生成的缩略图不能有<span class="keywords">透明背景</span>（因为缩略图最终生成是jpg格式的）</li>
        <li>上传的图片，最后会被裁剪为<span class="keywords">1.82</span>比例的图片</li>
        <li>上传的图片不允许超过<span class="keywords">1MB</span></li>
        <li>上传的音乐文件不允许超过<span class="keywords">6MB</span></li>
        @*<li>测试测试测试测试测试测试测试测试测试测试测试测试测试测试测试测试测试askljdfljgdlsajglsajgdlsakjglsajgldsajl askljdfljgdlsajglsajgdlsakjglsajgldsajl askljdfljgdlsajglsajgdlsakjglsajgldsajl askljdfljgdlsajglsajgdlsakjglsajgldsajl askljdfljgdlsajglsajgdlsakjglsajgldsajl askljdfljgdlsajglsajgdlsakjglsajgldsajl askljdfljgdlsajglsajgdlsakjglsajgldsajl askljdfljgdlsajglsajgdlsakjglsajgldsajl范德萨拉开进攻的萨拉开关打开拉萨结果拉萨结果的萨拉空间离开家路径</li>*@
    </ul>
</div>
<div class="main-context">
    <div class="modal fade" id="upStates">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal"><span aria-hidden="true">&times;</span><span class="sr-only">Close</span></button>
                    <h4 class="modal-title">Modal title</h4>
                </div>
                <div class="modal-body">
                    <p>One fine body&hellip;</p>
                </div>
            </div>
        </div>
    </div>
    @using (Html.BeginForm("AddSaid", "Said", FormMethod.Post, new Dictionary<string, object>(){
        { "spellcheck", "spellcheck" },
        { "name", "saidForm" },
        { "novalidate", "novalidate" },
        { "ms-controller", "said" },
        { "OnSubmit", "return false;" }}))
    {
        <div class="said-article">
            <div class="said-title-con">
                @Html.TextBoxFor(Model => Model.STitle, new Dictionary<string, object>() {
                    { "ms-duplex", "sTitle" },
                    { "class", "said-title" },
                    { "ms-class", "said-error:!sTitle.length" },
                    { "ms-change", "saveTolocalStorage('sTitle',sTitle)" },
                    { "autocomplete", "off" },
                    { "placeholder", "文章标题" },
                    { "required", "" },
           })
            </div>
            <div class="said-context-content">
                <!-- said-error-->
                @Html.TextAreaFor(Model => Model.SContext, new Dictionary<string, object>() {
                   { "class", "said-context" },
                   { "autocomplete", "off" },
                   { "ms-duplex", "sContext" },
                   { "ms-change", "saveTolocalStorage('sContext',sContext)" },
                   { "placeholder", "这中间有个said的水印图啊，在bootstrap见过一个【缩略语】的排版，非常奈斯啊啊！！！！" },
                   { "required", "" },
           })
            </div>
            <button class="btn btn-lg said-priview center-block" ms-click="preview(sContext)" type="button">预览</button>
        </div>
        <div class="row said-view-container">
            <div class="col-md-6">
                <div class="panel panel-default relative-container">
                    <div class="panel-heading">歌曲</div>
                    <div class="panel-body" ms-controller="song">
                        <div class="afterClear">
                            <div class="col-md-4">
                                <div class="music-img">
                                    <div style="z-index: 2;" class="addSaid-mask" ms-visible="!songId" ms-click="dialog()" title="点击选择图片">
                                        <span class="song-mask-text">选择歌曲图片</span>
                                    </div>
                                    <div class="thumbnail">
                                        <img ms-attr-src="imgSrc? imgSrc:'../../Content/Images/UEDImg/demo-img6.jpg'" />
                                    </div>
                                </div>
                            </div>
                            <div class="music-info col-md-8">
                                <div class="input-group">
                                    <span class="input-group-addon">歌曲</span>
                                    <div class="queryInputBar">
                                        @Html.TextBoxFor(Model => Model.Song.SongName, new Dictionary<string, object>() {
                                            { "class", "form-control music-input" },
                                            { "autocomplete", "off" },
                                            {"ms-attr-disabled","songId"},
                                            { "ms-duplex", "songName" },
                                            { "placeholder", "歌曲名称" },
                                            { "required", "" }
                                        })
                                    </div>
                                </div>
                                <div class="input-group">
                                    <span class="input-group-addon">专辑</span>
                                    @Html.TextBoxFor(Model => Model.Song.SongAlbum, new Dictionary<string, object>(){
                                        { "class","form-control music-input"},
                                        { "placeholder", "歌曲专辑"},
                                        {"ms-attr-disabled","songId"},
                                        { "ms-duplex", "songAlbum" },
                                        { "autocomplete", "off"}
                                     })
                                </div>
                                <div class="input-group">
                                    <span class="input-group-addon">歌手</span>
                                    @Html.TextBoxFor(Model => Model.Song.SongArtist, new Dictionary<string, object>(){
                                        { "class","form-control music-input"},
                                        { "placeholder", "艺术家"},
                                        {"ms-attr-disabled","songId"},
                                        { "ms-duplex", "songArtist" },
                                        { "autocomplete", "off"}
                                    })
                                </div>
                                <div class="input-group" data-ng-class="has-error">
                                    <span class="input-group-addon">文件</span>
                                    @Html.TextBoxFor(Model => Model.Song.SongFileName, new Dictionary<string, object>() {
                                        { "class", "form-control music-input" },
                                        { "autocomplete", "off" },
                                        {"disabled","disabled"},
                                        { "ms-attr-value", "songFileName" },
                                        { "placeholder", "文件名（自动生成）" },
                                    })
                                </div>
                                <div class="songOp-btn">
                                    <button type="button" class="btn btn-danger songBtn" ms-click="remove()" title="移除歌曲信息">移除</button>
                                </div>
                                <div class="songOp-btn song-up-content">
                                    @*@Html.TextBoxFor(Model => Model.Song.SongId, new Dictionary<string, object>(){
                                            { "class","song-Upload"},
                                            { "type", "file"}
                                        })*@
                                    <div ms-widget="upload,uploadImages,uploadSong" class="upload-song"></div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="panel panel-default relative-container" ms-controller="uploadController">
                    <div style="z-index: 2;" class="addSaid-mask" ms-visible="!imgSrc" ms-click="dialog()">
                        <span class="so-upload-text">选择文章缩略图</span>
                    </div>
                    @*<div ms-widget="upload,uploadImages"></div>*@
                    <div class="panel-heading">描述</div>
                    <div class="panel-body">
                        <div class="col-md-4">
                            <div class="music-img">
                                <div class="thumbnail">
                                    <img ms-attr-src="imgSrc ? imgSrc :'../../Content/Images/test-said-img.jpg'" />
                                </div>
                            </div>
                        </div>
                        <div class="col-md-8">
                            @Html.TextAreaFor(Model => Model.SSummary, new Dictionary<string, object>() {
                                    { "class", "said-dis" },
                                    { "autocomplete", "off" },
                                    { "placeholder", "简介[支持HTML]" },
                                    { "required", "" },
                                    { "data-validate", "" },
                                    { "data-check", "said.error" }
                            })
                            <div class="songOp-btn song-up-content">
                                <button type="button" class="btn btn-danger songBtn" ms-click="clear()">移除图片</button>
                            </div>
                        </div>

                    </div>
                </div>
            </div>
            <div class="col-md-6">
                <div class="panel panel-default">
                    <div class="panel-heading">附加信息</div>
                    <div class="panel-body">
                        <div class="input-group" ms-controller="tagController">
                            <span class="input-group-addon">标签</span>
                            @Html.TextBoxFor(m => m.STag, new Dictionary<string, object>() {
                                { "class", "tag-input" },
                                { "ms-change", "saveTolocalStorage('bTag',bTag)" },
                                { "ms-widget", "groupInput" },
                                { "placeholder", "标签，支持[tab]分隔" },
                                { "autocomplete", "off" }
                            })
                        </div>
                        <div class="input-group" ms-class="has-error:!classify.length" ms-controller="classifyController">
                            <span class="input-group-addon">分类</span>
                            <div class="queryInputBar">
                                @Html.TextBoxFor(m => m.Classify.CName, new Dictionary<string, object>() {
                                    { "class", "classify-input" },
                                    { "ms-duplex", "classify" },
                                    { "placeholder", "分类名称" },
                                    { "autocomplete", "off" },
                                    { "ms-widget", "groupInput" }
                            })
                            </div>
                        </div>
                    </div>
                    <div class="panel-heading panel-subTitle">可选信息</div>
                    <div class="panel-body">
                        <div class="input-group">
                            <span class="input-group-addon">文件</span>
                            @Html.TextBoxFor(Model => Model.SName, new Dictionary<string, object>() {
                                    { "class", "form-control" },
                                    { "ms-duplex", "sName" },
                                    { "ms-input", "checkFileName(this,sName)" },
                                    { "autocomplete", "off" },
                                    { "placeholder", "文章发布的（文件）名称,为空自动生成" },
                                    { "data-toggle", "tooltip" },
                                    { "data-placement", "top" },
                                    { "data-title", "该文件名已经存在" },
                                    { "data-animation", "false" }
                       })
                        </div>
                        <div class="form-group">
                            <label>JavaScript</label>
                            @Html.TextAreaFor(Model => Model.SScript, new Dictionary<string, object>() {
                                { "class", "form-control" },
                                { "placeholder", "自定义JavaScript" },
                                { "ms-change", "saveTolocalStorage('sScript',sScript)" },
                                { "ms-duplex", "sScript" }
                            })
                        </div>
                        <div class="form-group">
                            <label>CSS</label>
                            @Html.TextAreaFor(Model => Model.SCSS, new Dictionary<string, object>() {
                                { "class", "form-control" },
                                { "placeholder", "自定义CSS" },
                                { "ms-change", "saveTolocalStorage('sCSS',sCSS)" },
                                { "ms-duplex", "bCSS" }
                            })
                        </div>
                        <div class="checkbox said-checkbox">
                            <label>
                                @*@Html.CheckBoxFor(Model => Model.SReprint, new { @type = "checkbox" })如果是直接提交表单，则可以直接采用checkbox控件，会生成两个input，具体请查阅：http://www.cnblogs.com/freeliver54/archive/2013/05/10/3070384.html*@
                                @Html.CheckBoxFor(m => m.SReprint, new Dictionary<string, object>() {
                                { "ms-duplex-checked", "sReprint" },
                                { "ms-change", "saveTolocalStorage('sReprint',sReprint)" }
                           })是否转载
                            </label>
                            <label>
                                @Html.CheckBoxFor(m => m.SIsTop, new Dictionary<string, object>() {
                                { "ms-duplex-checked", "sIsTop" },
                                { "ms-change", "saveTolocalStorage('sIsTop',sIsTop)" }
                            })是否置顶
                            </label>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="submit-container">
            <button class="btn btn-lg said-submit center-block" id="submit" type="submit">发布</button>
            <!--data-ng-class="{'submit-lock':!saidForm.$valid}"-->
        </div>
    }
</div>
@section Css{
    <link href="@Url.Content("~/Content/Back/Style/addSaid.css")" rel="stylesheet" />
}
@*@section HeadJs{
        <script src="@Url.Content("")"></script>
    }*@
@section FootJs{

    <script id="tplOpen" type="text/template">
        <!DOCTYPE HTML>
        <html xmlns="http://www.w3.org/1999/xhtml">
        <head>
            <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
            <title>预览Blog - 你听，你静静听</title>
            <link href="/Content/Style/Global.css" rel="stylesheet" />
            <link href="/Content/Style/said.css" rel="stylesheet" />
            <link href="/Content/Back/JavaScript/syntaxhighlighter/styles/shCoreDefault.css" rel="stylesheet" />
            <replacescript src="/Content/Back/JavaScript/syntaxhighlighter/scripts/shCore.js"></replacescript>
            <replacescript src="/Content/Back/JavaScript/syntaxhighlighter/scripts/shBrushJScript.js"></replacescript>
            <replacescript src="/Content/Back/JavaScript/syntaxhighlighter/scripts/shBrushCSharp.js"></replacescript>
            <replacescript src="/Content/Back/JavaScript/syntaxhighlighter/scripts/shBrushCss.js"></replacescript>
            <replacescript src="/Content/Back/JavaScript/syntaxhighlighter/scripts/shBrushSql.js"></replacescript>
        </head>
        <body>
            <section id="said-page">
                <header id="header">
                    <div id="nav-logo">
                        <a class="logo" title="听说" href="javascript:;">
                            <img src="/Content/Images/Said.png" alt="said logo" />
                        </a>
                    </div>
                    <nav id="nav">
                        <ul id="nav-flip">
                            <li>
                                <a href="javascript:;">首页</a>
                            </li>
                            <li><a href="javascript:;">blog</a></li>
                            <li><a href="javascript:;" class="nav-active">听说</a></li>
                            <li><a href="javascript:;">实验室</a></li>
                            <li><a href="javascript:;">关于</a></li>
                        </ul>
                        <div id="said-search-con" style="width: 50px;">
                            <div id="said-search">
                                <div id="said-search-btn" title="搜索"></div>
                                <form id="said-search-form">
                                    <input autocomplete="off" id="said-search-input" type="text" placeholder="搜索你感兴趣的" />
                                </form>
                            </div>
                        </div>
                        <span id="nav-hover" style="left: 140px;"></span>
                    </nav>
                </header>
                <section id="content">
                    <div class="content-bg">
                        <div class="content-bg-img" style="left: 0;"></div>
                    </div>
                    <section class="music-song">
                        <dl class="music-song-content">
                            <dt class="music-song-img">
                                <img src="/Content/Images/testImg-Paramore.Ps.jpg" alt="paramore" />
                            </dt>
                            <dd class="music-song-info">
                                <ul>
                                    <li>
                                        <h2 class="music-song-name">The Only Exception The Only Exception The Only Exception</h2>
                                    </li>
                                    <li>
                                        <div class="music-song-summary"><a title="Artist" class="music-song-link" target="_blank" href="http://www.sogou.com/web?query=paramore&ie=utf8">Paramore</a></div>
                                        <div class="music-song-summary"><a title="Album" class="music-song-link" target="_blank" href="http://www.sogou.com/web?query=The+Only+Exception&ie=utf8">The Only Exception</a></div>
                                    </li>
                                </ul>
                            </dd>
                            <dd id="music-play" class="music-song-play">
                                <div class="music-play-status"><a href="javascript:;" id="said-player-play" class="play-btn player-play">播放</a></div>
                                <ul class="music-play-status">
                                    <li class="music-play-detail">
                                        <div class="music-time music-play-sound"><span>01:03</span><span>&nbsp;/&nbsp;03:42</span></div>
                                        <a class="music-like music-play-sound" href="javascript:;" title="我喜欢~么么哒">like</a><a class="music-volume music-play-sound" href="javascript:;" title="音量" id="said-play-volume"></a>
                                    </li>
                                    <li>
                                        <div class="music-play-progress">
                                            <div class="play-progress" id="said-progress" style="width: 28%;"></div>
                                        </div>
                                    </li>
                                </ul>
                            </dd>
                        </dl>
                    </section>
                    <article class="music-content">
                        <h1 class="blog-title" id="title"></h1>
                        <section class="blog-content" id="context"></section>
                    </article>
                    <section class="blog-more-info">
                        <div class="blog-more-head">
                            <div class="blog-comment-txt"><span>评论(0)</span></div>
                            <ul class="blog-info">
                                <li class="blog-info-date"><time>2014/10/08 00:21:51</time></li>
                                <li class="blog-info-like" title="like"><span>1</span></li>
                                <li class="blog-info-PV" title="浏览"><span>1</span></li>
                            </ul>
                        </div>
                        <div class="blog-more-comment">
                            <div class="blog-comment-content">
                                <div class="blog-comment-bar">
                                    <div class="comment-portrait">
                                        <img alt="github" src="/Content/Images/github.png" />
                                    </div>
                                    <form action="/" class="comment-form">
                                        <ul class="blog-comment-info" style="">
                                            <li>
                                                <input placeholder="名称" />
                                            </li>
                                            <li>
                                                <input type="email" placeholder="Email" />
                                            </li>
                                            <li>
                                                <input type="url" placeholder="您的站点" />
                                            </li>
                                            <li>
                                                <input type="checkbox" id="comment-cookie" /><label for="comment-cookie">下次自动填写</label>
                                            </li>
                                        </ul>
                                        <div class="comment-bar">
                                            <textarea name="comment" class="cmt-context" id="comment-context" placeholder="名称和Email（不会公开）必填，保存信息会保存这些信息，下次自动填充"></textarea><div class="comment-more-bar">
                                                <div class="comment-more-bg"></div>
                                                <input type="submit" class="submitLock ct-submit" id="comment-submit" value="提交评论" />
                                            </div>
                                        </div>
                                    </form>
                                </div>
                            </div>
                        </div>
                    </section>
                </section>
            </section>
            <footer id="footer">
                <section id="footer-content">
                    <dl>
                        <dt>推荐</dt>
                        <dd>
                            <ul class="footer-recm">
                                <li><a href="javascript:;">博客园 - 开发者的网上家园</a></li>
                                <li><a href="javascript:;">张鑫旭的个人博客</a></li>
                                <li><a href="javascript:;">司徒正美个人博客 - 博客园</a></li>
                                <li><a href="javascript:;">Github - linkFly</a></li>
                            </ul>
                        </dd>
                    </dl>
                    <dl>
                        <dt>许可</dt>
                        <dd>本站原创并且没有注明相关许可协议的内容，默认均采用<a href="javascript:;">《知识共享署名 3.0 中国大陆许可协议》</a>进行许可。非原创内容遵循原文许可协议。</dd>
                    </dl>
                    <dl>
                        <dt>联系方式</dt>
                        <dd>内容基本都是自己原创的，引用的地方都会给出相关引用，如有疏漏，联系方式：</dd>
                        <dd>linkFly6#live.com（#替换成@@）</dd>
                    </dl>
                    <div class="footer-copyright">©2015&nbsp;linkFly&nbsp;-&nbsp;Said:听说&nbsp;&nbsp;京ICP备13014059号</div>
                </section>
            </footer>
            <replacescript type="text/javascript">
                document.title = "预览Said -" + window.said.title;
                document.getElementById("title").innerHTML = window.said.title;
                document.getElementById("context").innerHTML = window.said.context;
                SyntaxHighlighter.defaults["toolbar"] = false;
                SyntaxHighlighter.defaults["collapse"] = false;
                SyntaxHighlighter.all();
            </replacescript>
        </body>
    </html>
</script>


<script type="text/javascript">
    var Action = {
        uploadSaidImg: '@Url.Action("UploadSaidImage", "Source")',
        uploadMusicUrl: '@Url.Action("UploadSongImage", "Source")',
        getMusicImg: '@Url.Action("GetImagesList", "Source")',
        musicImg: '@Url.Action("UploadMusicImg", "Source")',
        deleteImage: '@Url.Action("DeleteImage","Source")',
        music: '@Url.Action("UploadMusic", "Source")',
        existsSongFile: '@Url.Action("ExistsSongFileName", "Back")',
        existsSaidName: '@Url.Action("ExistsSaidFileName", "Back")',
        form: '@Url.Action("AddSaid", "Said")'
    },
    Source = {
        song: '@ConfigInfo.SourceMusicPath',
        songImg: '@ConfigInfo.SourceMusicImagePath',
        summaryImg: '@ConfigInfo.SourceSaidPath',
        songType: '@((int)Said.Models.ImageType.Music)',
        saidImageType: '@((int)Said.Models.ImageType.Said)'
    },
    DataCenter = {
        songs: {
            'Yellow': 'yellowcoldplay酷玩乐队',
            'My Love': 'mylovemlwestlife西城男孩',
        },
        songsData: {
            'Yellow': {
                id: '106f168f-10f1-4459-918d-f811bc8a7fa6',
                name: 'Yellow',
                album: 'Yellow',
                artist: 'Coldplay',
                fileName: '302320154702223701.mp3',
                img: '098920153702223601.jpg'//注意这个路径应该只是个图片名称
            },
            'My Love': {
                id: '97279318-f809-488c-b31c-fe642acb322b',
                name: 'My Love',
                album: 'Coust To Coust',
                artist: 'Westlife',
                fileName: '484720153302224501.mp3',
                img: '107320153502225701.png'
            }
        },
        tags: ['javascript',
                      'ECMAScript',
                      'C#',
                      '.NET',
                      'jQuery',
                      '.NET MVC',
                      'Sql Server',
                      'NodeJS',
                      'Zepto', 'requireJS', 'angularJS', 'Backbone', 'linkFly', 'bootstrap'],
        types: {
            '.NET': '6198f526-fa0f-4429-983a-bebc8439e7c8',
            'RequireJS': '271f2924-69ce-4522-8e39-cc8f31059de8',
            'jQuery': 'ac11966d-01bf-4554-bd7e-7e0a807ea8fa',
            'CSS': '817aa0f0-447e-46d3-805c-8952c0332df8',
            'ECMAScript 6': '136116aa-a5f6-4f88-bcc4-00a1b4db0dba',
            'ECMAScript 5': 'd2774f82-3f56-4b0a-b3ae-0ad203cdc510',
            'HTML': 'f6b5ec17-a053-491c-b08e-0368aa115a82',
            'JavaScript': '2e0dfa2f-dca4-4e1a-abeb-889ce98a8bb0'
        },
        classifly: [
            '.NET',
            'RequireJS',
            'jQuery',
            'CSS',
            'ECMAScript 6',
            'ECMAScript 5',
            'HTML',
            'JavaScript'
        ],
        //MIME参考：http://www.w3school.com.cn/media/media_mimeref.asp
        imgFilters: ['jpg', 'jpeg', 'jpe', 'bmp', 'png', 'gif'/*, 'image/png', 'image/bmp', 'image/gif', 'image/jpeg'*/],
        musicFilters: ['mp3', 'ogg']
    };
    //除非下面的js代码也是从外层定义的，否则require.config必须定义在当前页面内，因为requireJS加载的代码都是异步的
    require.config({
        baseUrl: '/Content/Back/JavaScript',
        paths: {
            'saidAdd': 'said/addSaid',
            'avalon': 'avalon/avalon.mobile.min',
            'groupInput': 'avalon/plug/groupInput',
            'avalonUpload': 'avalon/plug/uploadBox',
            'upload': 'so/plug/upload',
            'showMsg': 'so/plug/showMsg',
            'dialog': 'so/plug/dialog',
            'source': 'so/plug/source',
            'markdown': ['showdown/showdown'],
            'showDownThemeGithub': 'showdown/extensions/github'
        },
        packages: [
        {
            name: 'echarts',
            location: 'echarts-2.1.8/src',
            main: 'echarts'
        },
        {
            name: 'zrender',
            //location: 'http://ecomfe.github.io/zrender/src',
            location: 'zrender-master/src',
            main: 'zrender'
        },
        {
            name: 'so',
            location: 'so',
            main: 'so'
        },
        {
            name: 'said',
            location: 'said',
            main: 'said'
        }], shim: {
            'showDownThemeGithub': ['markdown']//依赖showdown
        }
    });

    require(['jquery', 'so', 'so/plug/search', 'avalon', 'showMsg', 'source', 'dialog', 'markdown', 'upload', 'avalonUpload', 'showDownThemeGithub', 'groupInput'], function ($, so, Search, avalon, showMsg, source, dialog, showdown) {
        $(function () {
            var slice = Array.prototype.slice;

            var previewTemplent = document.getElementById('tplOpen').innerHTML.replace(/replaceScript/gi, 'script'),
                showdown = window.Showdown,
                converter = new showdown.converter({ extensions: ['github'] }),//页面markdown转换器=>来自showDown.js
                preview = function () {
                    var previewWindow,//上一次打开的window
                            isSupport = true,//是否支持弹窗
                            supportError = function () {
                                if (!isSupport)
                                    dialog(TemplatePromptText.supportNewWindow[0], TemplatePromptText.supportNewWindow[1]);
                                return isSupport;
                            };
                    return function (title, context) {
                        if (!supportError()) return false;
                        if (!previewWindow || previewWindow.closed)
                            previewWindow = window.open();
                        if (!previewWindow) {//没有权限弹窗
                            isSupport = false;
                            return supportError();
                        }
                        /*
                        document.write只能输出到body，但HTML标签可以输出，但是输出没用，样式js都不解析执行..
                        所以访问window给它设置值来执行
                        */

                        previewWindow.document.open();
                        previewWindow.said = {
                            title: title.replace(/</g, '').replace(/>/g, ''),//标题
                            context: context//正文
                        };
                        previewWindow.document.write(previewTemplent);
                        previewWindow.document.close();
                        return true;
                    }
                }(),
                database = new so.DataBase('back.addSaid'),
                checkEmptyValue = function (key, title, summary) {
                    if (!vmSaid[key]) {
                        dialog(title, summary);
                        return false;
                    }
                    return true;
                },
                encode = function (value) {
                    return encodeURIComponent(value);
                };


            var vmSaid = avalon.define({
                $id: 'said',
                sTitle: database.val('sTitle'),
                sTag: database.val('sTag'),
                sSummary: database.val('sSummary'),
                sReprint: database.val('sReprint'),
                sScript: database.val('sScript'),
                sIsTop: database.val('sIsTop'),
                sCSS: database.val('sCSS'),
                sContext: database.val('sContext'),
                sImg: database.val('sImg'),
                sName: database.val('sName'),
                classify: database.val('classify'),
                checkFile: false,
                submitState: false,
                $skipArray: ['sTag'],
                //保存到本地数据库
                saveTolocalStorage: function (name, value) {
                    database.val(name, value);
                },
                //预览
                preview: function (markdownCode) {
                    if (!markdownCode.length) {
                        showMsg('没有输入正文', showMsg.WARNING, 2000);
                        return;
                    }
                    preview(vmSaid.stitle || '没有标题', converter.makeHtml(markdownCode));
                },
                checkFileName: function () {
                    //考虑性能，DOM缓存
                    var $cache, key = 'bName';
                    return function (elem, value) {
                        !$cache && ($cache = $(elem).tooltip({ trigger: 'manual' }));
                        vmSaid.checkFile = !!(value && ~DataCenter.files.indexOf(value.toLowerCase()));
                        $cache.tooltip(vmSaid.checkFile ? 'show' : 'hide');
                        vmSaid.checkFile ?
                            database.remove(key) : database.val(key, value);
                    }
                }(),
                check: function () {
                    vmSaid.submitState = true;
                    var temp;
                    return ['bTitle', 'bContext', 'classify', 'bImg', 'bSummary'].every(function (key) {
                        temp = errorHash[key];
                        return checkEmptyValue(key, temp[0], temp[1]);
                    });
                },
                save: function () {
                    //锁定按钮状态
                    if (vmSaid.submitState) return;
                    if (!(vmSaid.submitState = vmSaid.check())) return;

                    //针对分类id特殊处理下
                    var classifyId = DataCenter.classifyDatas.filter(function (item) {
                        return item[0].toLowerCase() === vmSaid.classify.toLowerCase();
                    });
                    classifyId = classifyId.length ? classifyId[0][1] : '';
                    said.ajax(Action.form, {
                        'STitle': encode(vmSaid.sTitle),
                        'STag': encode(vmSaid.sTag.join(',')),
                        'SSummary': encode(vmSaid.sSummary),
                        'SHTML': encode(converter.makeHtml(vmSaid.sContext)),
                        'SReprint': encode(vmSaid.sReprint),
                        'SScript': encode(vmSaid.sScript),
                        'SIsTop': encode(vmSaid.sIsTop),
                        'SCSS': encode(vmSaid.sCSS),
                        'SContext': encode(vmSaid.sContext),
                        'SImg': encode(vmSaid.sImg),
                        'SName': encode(vmSaid.sName),
                        'ClassifyId': encode(classifyId)
                    }).done(function (data) {
                        if (!data.code) {//done
                            showMsg(so.format(TemplatePromptText.addBlogDone, vmSaid.bTitle), showMsg.OK, true);
                        } else {
                            showMsg(so.format(TemplatePromptText.addBlogError, data.data.msg.split(',').map(function (msg) {
                                return '<p>' + msg + '</p>';
                            }).join(''), data.code), showMsg.ERROR, true);
                        }

                    }).fail(function (data) {
                        showMsg(so.format(TemplatePromptText.addBlogFail, data.status, data.statusText), showMsg.ERROR, true);
                    }).always(function () {
                        vmSaid.submitState = false;
                    });
                }
            });

            //Song Dialog
            var _ImgSelectdialog = $(document.body).source({
                loadUrl: Action.getMusicImg,
                path: Source.songImg,
                type: Source.songType,
                uploadUrl: Action.uploadMusicUrl,
                deleteUrl: '/Back/Source/RealDeleteImage',//TODO 这个是物理删除，测试用这个
                multiple: false,
                //deleteUrl: Action.deleteImage, //这个是逻辑删除，上线用这个
                callback: function (data) {
                    vmSong.data = data;
                    var imgSrc = Source.songImg + data.name;
                    vmSong.imgSrc = imgSrc;
                    database.val('imgData', data).val('imgSrc', imgSrc);
                }
            });

            var vmSong = avalon.define({
                $id: 'song',
                songId: '',
                songArtist: '',
                songAlbum: '',
                songFileName: database.val('song.songFileName'),
                songName: '',
                songImg: '',
                imgSrc: database.val('imgSrc'),
                data: database.val('imgData'),
                $skipArray: ['data', 'uploadSong'],
                uploadSong: {
                    classFile: 'hidden-file',
                    //name: 'testFile',
                    filters: DataCenter.musicFilters,
                    url: Action.music,
                    text: '上传歌曲',
                    classContainer: 'btn btn-primary songBtn so-upload-mask',
                    size: 6291456,
                    visible: !vmSaid.bImg,
                    done: function (vm, data) {
                        if (data.code) {
                            showMsg('服务器返回异常：' + data.msg, showMsg.ERROR, true);
                            return true;
                        }

                        vmSong.songFileName = data.name;
                        database.val('song.songFileName', data.name);
                        return true;
                    },
                    fail: function (vm, data) {
                        showMsg('上传失败：' + data.msg, showMsg.ERROR, true);
                    }
                },
                dialog: function () {
                    _ImgSelectdialog.show();
                },
                remove: function () {

                },
                upload: function () {//上传歌曲

                }
            });

            //tag
            avalon.define({
                $id: 'tagController',
                //tags: DataCenter.tags,
                groupInput: {
                    datas: DataCenter.tags,
                    multiple: true,
                    zIndex: 4,
                    callback: function (values) {
                        //console.log(values);
                        vmSaid.bTag = values;
                        database.val('bTag', values);
                    },
                    values: vmSaid.bTag
                }
            });
            //classify
            avalon.define({
                $id: 'classifyController',
                groupInput: {
                    datas: DataCenter.classifyList,
                    zIndex: 3,
                    custom: false,
                    callback: function (value) {
                        database.val('classify', value);
                    }
                    //classContaier: 'queryInputBar'
                }
            });

            //upload

            var _summaryDialog = $.source({
                loadUrl: '/Back/Source/GetImagesList',
                path: Source.summaryImg,
                type: Source.saidImageType,
                uploadUrl: Action.uploadSaidImg,
                deleteUrl: '/Back/Source/RealDeleteImage',//这个是物理删除，测试用这个
                multiple: false,
                //deleteUrl: Action.deleteImage, //这个是逻辑删除，上线用这个
                callback: function (data) {
                    vmUpload.data = data;
                    var imgSrc = Source.summaryImg + data.name;
                    vmUpload.img = data.name;
                    vmUpload.imgSrc = imgSrc;
                    database.val('sImg', data).val('summary.imgSrc', imgSrc);
                }
            });
            var vmUpload = avalon.define({
                $id: 'uploadController',
                img: database.val('sImg'),
                imgSrc: database.val('summary.imgSrc'),
                $skipArray: ['img'],
                dialog: function (id) {
                    _summaryDialog.show();
                },
                clear: function () {
                    database.remove('sImg')
                    database.remove('summary.imgSrc');
                    vmUpload.imgSrc = vmUpload.img = '';
                }
            });


            //console.log(vmUpload);




            //var vmSaid = avalon.define('blog', function (vm) {
            //    vm.BTitle = '';
            //});
            avalon.scan();
            //console.dir(avalon.vmodels);
        });
    });

    require(['jquery'], function ($) {
        return;
        //form提交
        submitBtn.addEventListener('click', function () {
            //console.log(formValidate);
            save();
            if (changeState()) return false;
            changeState(0);
            var checkResult = formValidate.test(function (elem, checked, key, value, pattern) {
                //console.log(elem, checked, key, value, pattern);
                validateData(elem, checked, key, value, pattern);
            });
            if (!checkResult) {
                //检测完毕，如果有错误应该清空检测进度，需要调整
                changeState(1);
                return changeState(1);
            } else {
                //默认检测通过，检测特殊项：歌曲、缩略图和标签
                if (!Song.check()) {
                    dialog('歌曲信息错误', '请上传歌曲图片、歌曲文件或选择正确的歌曲信息');
                    return changeState(1);
                }
                //检测异步信息
                if (!fileNameSongNameModel.check()) {
                    dialog('歌曲文件信息错误', '请填写没有冲突的歌曲文件信息');
                    return changeState(1);
                }
                if (!fileNameSaidModel.check()) {
                    dialog('文章文件名错误', '请填写没有冲突的文章文件名信息');
                    return changeState(1);
                }

                //检测标签
                if (!TagSelect.check()) {
                    errorLog(false);
                    return changeState(1);
                }
                //检测缩略图
                if (!SumImg.val()) {
                    dialog('缩略图错误', '请上传正确的缩略图');
                    SumImg.reset();
                    return changeState(1);
                }
                //至此检测完毕===========================
                changeState(2);
                lock = true;
                var data = new FormData(),//表单值
                    songData = Song.val();//歌曲值
                model.each(function (name, value) {
                    if (name !== 'SContext')//文章正文(标题需要么？)特殊处理，.net默认存在request.form安全检测，为了防止xss攻击建议保留这个安全检测
                        data.append(name, value);
                });
                data.append('SContext', encodeURIComponent(model.get('SContext').value));//文章源码
                data.append('SHTML', encodeURIComponent(getContextHTML()));//文章HTML源码
                //缩略图
                data.append('SImg', SumImg.val());
                //标签
                data.append('STag', TagSelect.val().join(','));
                //分类
                data.append('Classify.ClassifyId', ClassifyValue.val());
                //data.SHTML = '';
                if (songData.id) {
                    //选择了歌曲，而不是新增歌曲
                    data.append('Song.SSongId', songData.id);
                } else if (songData.img) {
                    //上传||suggestion选择了图片后，编辑了歌曲
                    data.append('Song.SongImg', songData.img);
                }
                addSaid.DataBase.clear();
                return;
                addSaid.ajax(data, Action.form, function (data, xhr) {
                    if (data.code === 0) {
                        dialog('添加Said成功', '喜大普奔，添加Said成功。');

                        //解决chrome下依赖加载报错的bug... TODO
                        changeState(1);
                    } else {
                        dialog('服务器返回异常', data.msg.split(',').map(function (msg) {
                            return '<p>' + msg + '</p>';
                        }).join('') + '<p>如果您觉得本次异常不合情理，请点击<a class="submitBug" href="javascript:;">反馈异常</a>，将跟踪此次异常。</p>');
                        changeState(1);
                    }
                }, function () {
                    changeState(1);
                    dialog('连接服务器异常', '<p>请检查您的网络信息</p><p>如果您觉得本次异常不合情理，请点击<a class="submitBug" href="javascript:;">反馈异常</a>，将跟踪此次异常。</p>');
                });
            }
        });
    });
</script>
}