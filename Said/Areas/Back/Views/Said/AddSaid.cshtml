@using Said.Common;
@model Said.Models.Article
@{
    ViewBag.Title = "添加Said";
    Layout = "~/Areas/Back/Views/Shared/_LayoutBack.cshtml";
    //var ClassifysList = ViewData["ClassifysList"] as IList<Said.Models.Classify>;
    var SongsList = ViewData["SongsList"] as IList<Said.Models.Song>;
    var AllFileNames = ViewData["FileNames"] as IList<string>;
}
<ol class="breadcrumb">
    <li><a href="/Back">Home</a></li>
    <li>Said管理</li>
    <li class="active">添加Said</li>
    <li class="g-help"><a href="javascript:;" id="said-help-btn" title="帮助"><i class="fa fa-question-circle"></i></a></li>
</ol>
<div id="said-help" class="said-mask-content said-watermark">
    <ul>
        <li>Said生成的缩略图不能有<span class="keywords">透明背景</span>（因为缩略图最终生成是jpg格式的）</li>
        <li>上传的图片，最后会被裁剪为<span class="keywords">1.82</span>比例的图片</li>
        <li>上传的图片不允许超过<span class="keywords">1MB</span></li>
        <li>上传的音乐文件不允许超过<span class="keywords">10MB</span></li>
        <li>选择正确的上传路径！默认上传的图片都会放到<span class="keywords">其他</span>下</li>
    </ul>
</div>
<div class="main-context">
    @using (Html.BeginForm("AddSaid", "Said", FormMethod.Post, new Dictionary<string, object>(){
        { "spellcheck", "spellcheck" },
        { "name", "saidForm" },
        { "novalidate", "novalidate" },
        { "ms-controller", "said" },
        { "OnSubmit", "return false;" }}))
    {
        <div class="said-article">
            <div class="said-title-con">
                @Html.TextBoxFor(Model => Model.STitle, new Dictionary<string, object>() {
                    { "ms-duplex", "sTitle" },
                    { "class", "said-title" },
                    { "ms-class", "said-error:!sTitle.length" },
                    { "ms-change", "saveTolocalStorage('sTitle',sTitle)" },
                    { "autocomplete", "off" },
                    { "placeholder", "文章标题" },
                    { "required", "" },
           })
            </div>
            <div class="said-context-content">
                <!-- said-error-->
                @Html.TextAreaFor(Model => Model.SContext, new Dictionary<string, object>() {
                   { "class", "said-context said-watermark" },
                   { "autocomplete", "off" },
                   { "ms-duplex", "sContext" },
                   { "ms-change", "saveTolocalStorage('sContext',sContext)" },
                   { "placeholder", "请使用Markdown编写正文" },
                   { "required", "" },
           })
            </div>
        </div>
        <div class="row said-view-container">
            <div class="col-md-6">
                <div class="panel panel-default relative-container">
                    <div class="panel-heading">歌曲</div>
                    <div class="panel-body" ms-controller="song">
                        <div class="afterClear">
                            <div class="col-md-4">
                                <div class="music-img">
                                    <div class="thumbnail">
                                        <img ms-attr-src="imgSrc? imgSrc:'/Content/Back/Images/cd-default.png'" />
                                    </div>
                                </div>
                            </div>
                            <div class="music-info col-md-8">
                                <div class="input-group">
                                    <span class="input-group-addon">歌曲</span>
                                    @*<div class="queryInputBar">*@
                                    @Html.TextBoxFor(Model => Model.Song.SongName, new Dictionary<string, object>() {
                                            { "class", "classify-input" },
                                            { "autocomplete", "off" },
                                            { "ms-duplex", "songName" },
                                            { "placeholder", "歌曲名称" },
                                            { "required", "" },
                                            { "ms-widget", "groupInput" }
                                        })
                                    @*</div>*@
                                </div>
                                <div class="input-group">
                                    <span class="input-group-addon">专辑</span>
                                    @Html.TextBoxFor(Model => Model.Song.SongAlbum, new Dictionary<string, object>(){
                                        { "class","form-control music-input"},
                                        { "placeholder", "歌曲专辑"},
                                        {"disabled","disabled"},
                                        { "ms-duplex", "songAlbum" },
                                        { "autocomplete", "off"}
                                     })
                                </div>
                                <div class="input-group">
                                    <span class="input-group-addon">歌手</span>
                                    @Html.TextBoxFor(Model => Model.Song.SongArtist, new Dictionary<string, object>(){
                                        { "class","form-control music-input"},
                                        { "placeholder", "艺术家"},
                                        {"disabled","disabled"},
                                        { "ms-duplex", "songArtist" },
                                        { "autocomplete", "off"}
                                    })
                                </div>
                                <div class="input-group" data-ng-class="has-error">
                                    <span class="input-group-addon">文件</span>
                                    @Html.TextBoxFor(Model => Model.Song.SongFileName, new Dictionary<string, object>() {
                                        { "class", "form-control music-input" },
                                        { "autocomplete", "off" },
                                        {"disabled","disabled"},
                                        { "ms-attr-value", "songFileName" },
                                        { "placeholder", "文件名（自动生成）" },
                                    })
                                </div>
                                @*<div class="songOp-btn">
                                        <button type="button" class="btn btn-danger songBtn" ms-click="remove()" title="移除歌曲信息">移除</button>
                                    </div>*@
                            </div>
                        </div>
                    </div>
                </div>
                <div class="panel panel-default relative-container" ms-controller="uploadController">
                    <div style="z-index: 2;" class="addSaid-mask" ms-visible="!imgSrc" ms-click="dialog()">
                        <span class="so-upload-text">选择文章缩略图</span>
                    </div>
                    <div class="panel-heading">描述</div>
                    <div class="panel-body">
                        <div class="col-md-4">
                            <div class="summay-img">
                                <div class="thumbnail">
                                    <div class="summay-img-item" ms-css-background-image="'url(' + (imgSrc ? imgSrc : '/Content/Images/said-up-def.png') + ')'"></div>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-8">
                            @Html.TextAreaFor(Model => Model.SSummary, new Dictionary<string, object>() {
                                    { "class", "said-dis" },
                                    { "ms-class", "said-error:sImg!=null && !sSummary" },
                                    { "autocomplete", "off" },
                                    { "placeholder", "简介[支持HTML]" },
                                    { "ms-duplex", "sSummary" },
                                    { "ms-change", "saveTolocalStorage('sSummary',sSummary)" }
                            })
                            <div class="songOp-btn song-up-content">
                                <button type="button" class="btn btn-danger songBtn" ms-click="clear()">移除图片</button>
                            </div>
                        </div>

                    </div>
                </div>
            </div>
            <div class="col-md-6">
                <div class="panel panel-default">
                    @*<div class="panel-heading">附加信息</div>
                        <div class="panel-body">
                            <div class="input-group" ms-controller="tagController">
                                <span class="input-group-addon">标签</span>
                                @Html.TextBoxFor(m => m.STag, new Dictionary<string, object>() {
                                    { "class", "tag-input" },
                                    { "ms-change", "saveTolocalStorage('bTag',bTag)" },
                                    { "ms-widget", "groupInput" },
                                    { "placeholder", "标签，支持[tab]分隔" },
                                    { "autocomplete", "off" }
                                })
                            </div>
                            <div class="input-group" ms-class="has-error:!classify.length" ms-controller="classifyController">
                                <span class="input-group-addon">分类</span>
                                <div class="queryInputBar">
                                    @Html.TextBoxFor(m => m.Classify.CName, new Dictionary<string, object>() {
                                        { "class", "classify-input" },
                                        { "ms-duplex", "classify" },
                                        { "placeholder", "分类名称" },
                                        { "autocomplete", "off" },
                                        { "ms-widget", "groupInput" }
                                })
                                </div>
                            </div>
                        </div>*@
                    <div class="panel-heading panel-subTitle">可选信息</div>
                    <div class="panel-body">
                        <div class="input-group">
                            <span class="input-group-addon">文件</span>
                            @Html.TextBoxFor(Model => Model.SName, new Dictionary<string, object>() {
                                    { "class", "form-control" },
                                    { "ms-duplex", "sName" },
                                    { "ms-input", "checkFileName(this,sName)" },
                                    { "autocomplete", "off" },
                                    { "placeholder", "文章发布的（文件）名称,为空自动生成" },
                                    { "data-toggle", "tooltip" },
                                    { "data-placement", "top" },
                                    { "data-title", "该文件名已经存在" },
                                    { "data-animation", "false" }
                       })
                        </div>
                        <div class="form-group">
                            <label>JavaScript</label>
                            @Html.TextAreaFor(Model => Model.SScript, new Dictionary<string, object>() {
                                { "class", "form-control" },
                                { "placeholder", "自定义JavaScript" },
                                { "ms-change", "saveTolocalStorage('sScript',sScript)" },
                                { "ms-duplex", "sScript" }
                            })
                        </div>
                        <div class="form-group">
                            <label>CSS</label>
                            @Html.TextAreaFor(Model => Model.SCSS, new Dictionary<string, object>() {
                                { "class", "form-control" },
                                { "placeholder", "自定义CSS" },
                                { "ms-change", "saveTolocalStorage('sCSS',sCSS)" },
                                { "ms-duplex", "sCSS" }
                            })
                        </div>
                        <div class="checkbox said-checkbox">
                            <label>
                                @*@Html.CheckBoxFor(Model => Model.SReprint, new { @type = "checkbox" })如果是直接提交表单，则可以直接采用checkbox控件，会生成两个input，具体请查阅：http://www.cnblogs.com/freeliver54/archive/2013/05/10/3070384.html*@
                                @Html.CheckBoxFor(m => m.SReprint, new Dictionary<string, object>() {
                                { "ms-duplex-checked", "sReprint" },
                                { "ms-change", "saveTolocalStorage('sReprint',sReprint)" }
                           })是否转载
                            </label>
                            <label>
                                @Html.CheckBoxFor(m => m.SIsTop, new Dictionary<string, object>() {
                                { "ms-duplex-checked", "sIsTop" },
                                { "ms-change", "saveTolocalStorage('sIsTop',sIsTop)" }
                            })是否置顶
                            </label>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="submit-container">
            <button class="btn btn-lg btn-success longBtn" type="button" ms-click="submit(false)">发&nbsp;&nbsp;&nbsp;&nbsp;布</button>
            <button class="btn btn-lg longBtn" type="button" ms-click="submit(true)">存为草稿</button>
            <!--data-ng-class="{'submit-lock':!saidForm.$valid}"-->
        </div>
    }
</div>
@section Css{
    @Styles.Render("~/static/back/css/said.add")
}

@section FootJs{
    @Scripts.Render("~/static/back/js/said.add")
    <script type="text/javascript">
        var Action = {
            uploadSaidImg: '@Url.Action("Upload", "Image")',
            uploadMusicUrl: '@Url.Action("UploadSongImage", "Source")',
            getMusicImg: '@Url.Action("GetImagesList", "Image")',
            musicImg: '@Url.Action("UploadMusicImg", "Source")',
            deleteImage: '@Url.Action("DeleteImage","Source")',
            music: '@Url.Action("UploadMusic", "Source")',
            existsSongFile: '@Url.Action("ExistsSongFileName", "Back")',
            existsSaidName: '@Url.Action("ExistsSaidFileName", "Back")',
            form: '@Url.Action("AddSaid", "Said")'
        },
        Source = {
            song: '@ConfigInfo.SourceMusicPath',
            songImg: '@ConfigInfo.SourceMusicImagePath',
            summaryImg: '@ConfigInfo.SourceSaidPath',
            songType: '@((int)Said.Models.ImageType.Music)',
            saidImageType: '@((int)Said.Models.ImageType.Said)'
        },
        DataCenter = {
            songs: [
                //{
                //    name: 'Yellow',
                //    query: 'Yellow - Coldplay',
                //    data: {
                //        id: '106f168f-10f1-4459-918d-f811bc8a7fa6',
                //        name: 'Yellow',
                //        album: 'Yellow',
                //        artist: 'Coldplay',
                //        fileName: '302320154702223701.mp3',
                //        img: '098920153702223601.jpg'//注意这个路径应该只是个图片名称
                //    }
                //}
            ],
            //MIME参考：http://www.w3school.com.cn/media/media_mimeref.asp
            imgFilters: ['jpg', 'jpeg', 'jpe', 'bmp', 'png', 'gif'/*, 'image/png', 'image/bmp', 'image/gif', 'image/jpeg'*/],
            musicFilters: ['mp3', 'ogg'],
            files: []
        };


        @{
            if (SongsList != null) {
                foreach (Said.Models.Song item in SongsList)
                {
                    Write(new HtmlString(string.Format("DataCenter.songs.push({{ name: \"{0}\", query: \"{0}{1}\", data: {{ id: \"{2}\", name: \"{0}\", album:\"{3}\", artist:\"{1}\", fileName: \"{4}\", img: \"{5}\" }}}});",
                        item.SongName,item.SongArtist,item.SongId,item.SongAlbum,item.SongFileName,item.Image.IFileName
                        )));
                }
            }
            if(AllFileNames!=null){
                foreach (string fileName in AllFileNames)
	            {
                    Write(new HtmlString(string.Format("DataCenter.files.push('{0}');",fileName)));
	            }
            }
        }
        require(['said.add'], function (view) {
            view(Action, Source, DataCenter);
        })


    </script>
}