@using Said.Models;
@{
    ViewBag.Title = "Said管理中心";
    Layout = "~/Areas/Back/Views/Shared/_LayoutBack.cshtml";
    IList<Article> Articles = ViewData["articles"] as IList<Article>;
}

@*<div class="page-header">
        <h3>添加Said&nbsp;&nbsp;<small>&gt;添加一篇Said</small></h3>
    </div>*@
<ol class="breadcrumb">
    <li><a href="/Back">Home</a></li>
    <li>Siad管理</li>
    <li class="active">添加Said</li>
</ol>
<div class="main-context">
    @*<div class="context-chart">
            <div id="userChart">
            </div>
        </div>*@
    <div class="bs-table">
        <table id="btTable" class="table table-hover table-striped" data-striped="true" data-show-refresh="true" data-show-toggle="true" data-show-columns="true" data-search="true" data-pagination="true"></table>
    </div>
</div>
@section Css{
    @Styles.Render("~/static/back/css/saidCenter.css", "~/static/back/css/bootstrap-table.css")
    <style>
        /*boostrap-table的列表后加载出来，会造成页面出横向滚动条，是因为页面的宽度计算有问题（数据加载的多，会出竖向滚动条，竖向滚动条占据了空间，导致页面上的元素宽度计算不正确，从而出现横向滚动条），所以特殊处理下样式*/
        .main-context { overflow: hidden; }
        .context-chart { padding-right: 17px; }
    </style>
}
@section FootJs{
    @Scripts.Render("~/static/back/js/said.index.js")
    <script>
        var articlesDatas = [];

        @if (Articles != null)
        {

            foreach (var item in Articles)
            {

                Write(Html.Raw(string.Format(@"articlesDatas.push({{
                        SaidId: '{0}',
                        STitle: '{1}',
                        STag: '{2}',
                        SSummary: '{3}',
                        SPV: '{4}',
                        SName: '{5}',
                        SIsTop: '{6}',
                        SComment: '{7}',
                        SClick: '{8}',
                        IsPrivate: '{9}',
                        Password: '{10}',
                        Likes: '{11}',
                        SHTML:'{12}',
                        Date:'{13}',
                        Song: {{
                            'SongName':'{14}',
                            'SongId':'{15}',
                            'SongArtist':'{16}',
                            'SongAlbum':'{17}',
                            'SongFileName':'{18}'
                        }}
                        }});",
                        item.SaidId,
                        item.STitle,
                        item.STag,
                        HttpUtility.HtmlEncode(item.SSummary.Replace("\n", " ")),
                        item.SPV,
                        item.SName,
                        item.SIsTop,
                        item.SComment,
                        item.SClick,
                        item.IsPrivate,
                        item.Password,
                        item.Likes,
                        HttpUtility.HtmlEncode(item.SHTML.Replace("\n", " ")),
                        item.Date.ToString("yyyy-MM-dd HH:mm:ss"),
                        HttpUtility.HtmlEncode(item.Song.SongName),
                        item.Song.SongId,
                        HttpUtility.HtmlEncode(item.Song.SongArtist),
                        HttpUtility.HtmlEncode(item.Song.SongAlbum),
                        HttpUtility.HtmlEncode(item.Song.SongFileName)
                        )));


            }
        }
        //console.info(articlesDatas);
    </script>
    <script>


        var Action = {
            article: '@Url.Action("Said", "Home")',
            img: '@Url.Action("UploadSaidImg", "Source")',
            imgLocation: '@Url.Content("~/Source/Said/Images/")',
            music: '@Url.Action("UploadMusic", "Source")',
            existsSongFile: '@Url.Action("ExistsSongFileName", "Back")',
            existsSaidName: '@Url.Action("ExistsSaidFileName", "Back")',
            form: '@Url.Action("AddSaid", "Back")',
            delele: '/Back/Said/Delete/',
            realDelete: '/Back/Said/RealDelete/'
        };
        /*
        var option = {
            title: {
                text: '2014-11-15',
                subtext: '昨日/今日访问量'
            },
            tooltip: {
                trigger: 'axis'
            },
            legend: {
                data: ['昨日', '今日']
            },
            toolbox: {
                show: true,
                feature: {
                    mark: { show: true },
                    dataView: { show: true, readOnly: false },
                    magicType: { show: true, type: ['line', 'bar', 'stack', 'tiled'] },
                    restore: { show: true },
                    saveAsImage: { show: true }
                }
            },
            calculable: true,
            xAxis: [
                {
                    type: 'category',
                    boundaryGap: false,
                    data: ['0:00', '1:00', '2:00', '3:00', '4:00', '05:00', '06:00', '07:00', '08:00', '09:00', '10:00', '11:00', '12:00', '13:00', '14:00', '15:00', '16:00', '17:00', '18:00', '19:00', '20:00', '21:00', '22:00', '23:00']
                }
            ],
            yAxis: [
                {
                    type: 'value'
                }
            ],
            series: [
                {
                    name: '昨日',
                    type: 'line',
                    smooth: true,
                    itemStyle: { normal: { areaStyle: { type: 'default' } } },
                    data: [1, 5, 2, 15, 5, 4, 3, 2, 4, 4, 4, 5, 12, 15, 20, 7, 6, 6, 1, 0, 2, 0, 6, 20]
                },
                {
                    name: '今日',
                    type: 'line',
                    smooth: true,
                    itemStyle: { normal: { areaStyle: { type: 'default' } } },
                    data: [5, 2, 5, 5, 5, 3, 3, 9, 10, 19, 16, 16, 22, 7, 7, 8, 8, 0, 0, 0, 0, 1, 6, 7]
                }
            ]
        };
        require(['echarts'], function (ec) {
            var myChart = ec.init(document.getElementById('userChart'));
            myChart.setOption(option);
        });
        */
        require(['said.index'], function (view) {
            view(Action);
        });

    </script>
}