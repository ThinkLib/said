@using Said.Models
@{
    ViewBag.Title = "Said后台 - 分类/标签管理";
    Layout = "~/Areas/Back/Views/Shared/_LayoutBack.cshtml";
    IList<Classify> Classifs = ViewData["Classify"] as IList<Classify>;
    IList<Tag> tags = ViewData["Tags"] as IList<Tag>;
    var list = ViewData["iconFiles"] as string[];
}
@*<div class="showmsg-container"></div>
<div class="showmsg-mask"></div>
<div class="showmsg-content">
    <div class="showmsg-close"></div>
    <img class="showmsg-state" src="~/Content/Back/Images/showMsg/ok.png" />
    <img class="showmsg-state" src="~/Content/Back/Images/showMsg/error.png" />
    <img class="showmsg-state" src="~/Content/Back/Images/showMsg/warning.png" />
    <div class="showmsg-context">这是内容</div>
</div>*@


<div class="select-icons" id="selectIcons" style="display: none;" ms-controller="iconBox">
    <div class="icons-box">
        <a href="javascript:;" class="icons-btn" ms-repeat-item="imgs" ms-attr-data-name="item" ms-click="clickImg(item)">
            <img ms-attr-src="sourcePath+item" /></a>
    </div>
    <div class="icons-upload">
        <div class="icons-upload-btn">
            <div ms-widget="upload" class="icons-upload-box"></div>
            <div class="btn btn-primary">上传</div>
        </div>
    </div>
</div>
<div class="page-header">
    <h2>标签/分类&nbsp;&nbsp;<small>&gt;标签/分类管理</small></h2>
</div>
<ol class="breadcrumb">
    <li><a href="javascript:;">Home</a></li>
    <li class="active">标签/分类</li>
</ol>
<div class="main-context">
    <div class="row">
        <div class="col-md-6">
            <div class="bs-table" ms-controller="classify">
                <div class="navbar-form navbar-left table-tool" id="classToolbar">
                    <div class="data-form">
                        <div class="form-control iconInput">
                            <div class="imgInput-box">
                                <img data-holder-rendered="true" ms-attr-src="img?imgSource+img:defaultIcon" data-src="holder.js/100%x180" alt="img" />
                            </div>
                            <input class="input-icon" ms-dom="input" ms-duplex="name" ms-attr-placeholder="modelId.length ?'编辑分类':'添加一个新的分类'" maxlength="20" ms-keydown="keydown($event)" />
                        </div>
                        <button id="classify-btn-up" class="btn" ms-click="add(name)" ms-class-1="btn-warning btn-edit:modelId.length" ms-class-2="btn-info btn-add:!modelId.length" ms-attr-title="modelId.length ? '点击将会修改该分类' : '添加一个新的分类'">{{modelId.length ? '修改':'添加' }}</button>
                        <button class="btn btn-success" ms-dom="loadIcon" ms-widget="popup,loadIcon">从图库中选择</button>
                        <button class="btn btn-info btn-cancel" ms-visible="modelId.length" ms-click="cancel($event)">取消</button>
                    </div>
                </div>
                <table ms-dom="table" data-toolbar="#classToolbar" class="table table-hover table-striped main-table" data-striped="true" data-show-refresh="true" data-show-columns="true" data-search="true" data-pagination="true"></table>
            </div>
        </div>
        <div class="col-md-6">
            <div class="bs-table" ms-controller="tag">
                <div class="navbar-form navbar-right table-tool" role="search" id="tagsToolbar">
                    <div class="data-form">
                        <div class="form-group">
                            <input type="text" class="form-control" ms-dom="input" ms-duplex="name" ms-attr-placeholder="id.length?'编辑标签':'添加一个新的标签'" maxlength="20" ms-keydown="keydown($event)" />
                        </div>
                        <button class="btn btn-info btn-add" ms-click="add(name)" ms-class-1="btn-warning btn-edit:id.length" ms-class-2="btn-info btn-add:!id.length" ms-attr-title="id.length ? '修改该标签' : '新增标签'">{{id.length ? '修改':'添加' }}</button>
                        <button class="btn btn-info btn-cancel" ms-visible="id.length" ms-click="cancel($event)">取消</button>
                    </div>
                </div>
                <table ms-dom="table" class="table table-hover table-striped main-table" data-toolbar="#tagsToolbar" data-striped="true" data-show-refresh="true" data-show-columns="true" data-search="true" data-pagination="true"></table>
            </div>
        </div>
    </div>
</div>
@section Css{
    <link href="@Url.Content("~/Content/Back/Style/classify.css")" rel="stylesheet" />
    <link href="@Url.Content("~/Content/Back/JavaScript/bootstrap/bootstrap-table/bootstrap-table.min.css")" rel="stylesheet" />
}
@section FootJs{
    <script src="~/Content/Back/JavaScript/so/plug/showMsg.js"></script>
    <script type="text/javascript">
        var PageDatas = {
            classify: [],
            tags: [],
            imgs: []
        },
            Action = {
                urlAddClassify: '@Url.Action("AddClassify", "Classify")',
                urlEditClassify: '@Url.Action("EditClassify", "Classify")',
                urlDelClassify: '@Url.Action("DeleteClassify", "Classify")',
                urlAddTag: '@Url.Action("AddTag", "Classify")',
                urlEditTag: '@Url.Action("EditTag", "Classify")',
                urlDelTag: '@Url.Action("DeleteTag", "Classify")',
                sourceClassify: '@ViewBag.SourceURL',
                uploadSourceUrl: '@Url.Content("~/Back/Source/UploadClassifyIcons/")',
                defualtImgUrl: '@Url.Content("~/Source/Sys/Images/icons/")',
                defaultIcon: 'default.png'
            };

        @if (Classifs != null)
        {
            foreach (var item in Classifs)
            {

                Write(new HtmlString(string.Format("PageDatas.classify.push({{ CName: '{0}',CIcon: '{1}',ClassifyId: '{2}'}});", item.CName, item.CIcon, item.ClassifyId)));
            }
        }
        @if (tags != null)
        {
            foreach (var item in tags)
            {
                Write(new HtmlString(string.Format("PageDatas.tags.push({{ TTagName: '{0}',TTagId: '{1}'}});", item.TagName, item.TagId)));
            }
        }
            @if (list != null)
            {
                foreach (var item in list)
                {
                    Write(new HtmlString(string.Format("PageDatas.imgs.push('{0}');", item)));
                }
            }
        require(['so', 'jquery', 'avalon', 'dialog', 'upload', 'classify', 'popup', 'bsTable', 'showMsg'], function (so, $, avalon, dialog) {
            $(function () {
                'use strict';
                /*
                   TODO
                   1、这个上传路径注意可以从站点全局路径对象中配置 TODO
                   2、分类和标签，在编辑状态下，点击保存，得验证是否修改过，是否和未修改以前的值一样，如果是一样，直接显示修改成功，而不传递到后端了
                   3、验证的名称是不是合法的（不要有空格,之类的符号）
                   4、如果输入了空格和,之类的符号，自动进行切割（视为多个标签添加）？？？？
                 */

                var vmClassify = avalon.define({
                    $id: 'classify',
                    modelId: '',
                    modelRowIndex: 0,
                    img: '',
                    name: '',
                    imgSource: Action.defualtImgUrl,
                    defaultIcon: Action.defualtImgUrl + Action.defaultIcon,
                    $skipArray: ['imgSource', 'defaultIcon'],
                    addCallback: function (name, img) {
                        $.ajax(Action.urlAddClassify, {
                            type: 'post',
                            dataType: 'json',
                            contentType: 'application/json',
                            data: JSON.stringify({ name: encodeURIComponent(name), imgName: img })
                        }).done(function (server) {
                            if (server.code === 0) {
                                //分类添加成功
                                vmClassify.name = vmClassify.img = vmClassify.modelId = '';
                                $classifyTable.bootstrapTable('append', [{
                                    CName: name,
                                    CIcon: img,
                                    ClassifyId: server.data
                                }]);
                                showMsg('添加分类成功', showMsg.OK);
                            } else {
                                showMsg('服务器返回异常：' + server.msg, showMsg.ERROR, true);
                            }
                        }).fail(function () {
                            showMsg('网络连接异常：', showMsg.ERROR);
                        });
                    },
                    editCallback: function (id, name, img) {
                        $.ajax(Action.urlEditClassify, {
                            type: 'post',
                            dataType: 'json',
                            contentType: 'application/json',
                            data: JSON.stringify({ name: encodeURIComponent(name), imgName: img, id: id })
                        }).done(function (result) {
                            if (result.code === 0) {
                                $classifyTable.bootstrapTable('updateRow', {
                                    index: vmClassify.modelRowIndex,
                                    row: {
                                        ClassifyId: id,
                                        CName: name,
                                        CIcon: img
                                    }
                                });
                                vmClassify.name = vmClassify.img = vmClassify.modelId = '';
                                vmClassify.modelRowIndex = 0;
                                showMsg('编辑分类成功', showMsg.OK);
                            } else {
                                showMsg('服务器返回异常：' + result.msg, showMsg.ERROR, true);
                            }
                        }).fail(function () {
                            showMsg('网络连接异常：', showMsg.ERROR, true);
                        });
                    },
                    add: function (name) {
                        var img = vmClassify.img || Action.defaultIcon,
                            name = name.trim();
                        if (!name.length) {
                            showMsg('请输入分类名称', showMsg.WARNING);
                            return vmClassify.elem.input.focus();
                        }
                        //ajax添加
                        vmClassify.modelId ? vmClassify.editCallback(vmClassify.modelId, name, img) : vmClassify.addCallback(name, img);

                    },
                    keydown: function (e) {
                        if (e.keyCode === 13)
                            vmClassify.add(vmClassify.name);
                    },
                    cancel: function (e) {
                        vmClassify.modelId = vmClassify.img = vmClassify.name = '';
                        vmClassify.modelRowIndex = 0;
                    },
                    popup: {
                        title: '请选择或上传新的Icon',
                        context: $('#selectIcons'),
                        width: 450,
                        classIcon: 'fa-picture-o'
                    },
                    set: function (img, name, id, index) {
                        vmClassify.img = img;
                        vmClassify.name = name;
                        if (id) {
                            vmClassify.modelId = id;
                        }
                        if (index != null)
                            vmClassify.modelRowIndex = index;
                    },
                    del: function (id) {//delete
                        if (!id) return;
                        $.ajax(Action.urlDelClassify, {
                            type: 'post',
                            dataType: 'json',
                            contentType: 'application/json',
                            data: JSON.stringify({ id: id })
                        }).done(function (result) {
                            if (result.code === 0) {
                                $classifyTable.bootstrapTable('remove', {
                                    field: 'ClassifyId',
                                    values: [id]
                                });
                                showMsg('删除分类成功', showMsg.OK);
                            } else {
                                showMsg('服务器返回异常：' + result.msg, showMsg.ERROR, true);
                            }
                        }).fail(function () {
                            showMsg('网络连接异常', showMsg.ERROR);
                        });
                    }
                });

                //上传
                var vmUpload = avalon.define({
                    $id: 'iconBox',
                    sourcePath: Action.defualtImgUrl,
                    imgs: PageDatas.imgs,
                    upload: {
                        text: '',
                        classFile: 'hidden-file',
                        //name: 'testFile',
                        url: Action.uploadSourceUrl,
                        visible: true,
                        done: function (vm, data) {
                            console.info(data);
                            if (data.code === 0) {//上传成功
                                vmUpload.imgs.push(data.name);
                            } else
                                showMsg(so.format('上传Icon失败，服务器返回消息：${0}', data.msg), showMsg.ERROR, true);
                            return true;
                        },
                        fail: function (vm, data) {
                            showMsg(so.format('上传Icon失败：${0}', data.msg), showMsg.ERROR, true);
                        }
                    },
                    clickImg: function (imgName) {
                        vmClassify.img = imgName;
                        //console.log(avalon.vmodels.loadIcon);
                        avalon.vmodels.loadIcon.close()
                    }

                });


                var vmTag = avalon.define({
                    $id: 'tag',
                    id: '',
                    name: '',
                    modelRowIndex: 0,
                    addCallback: function (name) {
                        //add
                        $.ajax(Action.urlAddTag, {
                            type: 'post',
                            dataType: 'json',
                            contentType: 'application/json',
                            data: JSON.stringify({ name: name })
                        }).done(function (server) {
                            if (server.code === 0) {
                                vmTag.name = vmTag.id = '';
                                $tagTable.bootstrapTable('append', [{
                                    TTagName: name,
                                    TTagId: server.data
                                }]);
                                showMsg('添加标签成功', showMsg.OK);
                            } else {
                                showMsg('服务器返回异常：' + server.msg, showMsg.ERROR, true);
                            }
                        }).fail(function () {
                            showMsg('网络连接异常：', showMsg.ERROR);
                        });
                    },
                    editCallback: function (id, name) {
                        $.ajax(Action.urlEditTag, {
                            type: 'post',
                            dataType: 'json',
                            contentType: 'application/json',
                            data: JSON.stringify({ name: name, id: id })
                        }).done(function (result) {
                            if (result.code === 0) {
                                $tagTable.bootstrapTable('updateRow', {
                                    index: vmTag.modelRowIndex,
                                    row: {
                                        TTagId: id,
                                        TTagName: name
                                    }
                                });
                                vmTag.name = vmTag.id = '';
                                vmTag.modelRowIndex = 0;
                                showMsg('编辑标签成功', showMsg.OK);
                            } else {
                                showMsg('服务器返回异常：' + result.msg, showMsg.ERROR, true);
                            }
                        }).fail(function () {
                            showMsg('网络连接异常：', showMsg.ERROR, true);
                        });
                    },
                    add: function (name) {
                        var name = name.trim();
                        if (!name.length) {
                            showMsg('请输入标签名称', showMsg.WARNING);
                            return vmTag.elem.input.focus();
                        }
                        vmTag.id ? vmTag.editCallback(vmTag.id, name) : vmTag.addCallback(name);

                    },
                    keydown: function (e) {
                        if (e.keyCode === 13)
                            vmTag.add(vmTag.name);
                    },
                    cancel: function () {
                        vmTag.id = vmTag.name = '';
                        vmTag.index = 0;
                    },
                    set: function (name, id, index) {
                        vmTag.name = name;
                        if (id) {
                            vmTag.id = id;
                        }
                        if (index != null)
                            vmTag.modelRowIndex = index;
                    },
                    del: function (id) {
                        $.ajax(Action.urlDelTag, {
                            type: 'post',
                            dataType: 'json',
                            contentType: 'application/json',
                            data: JSON.stringify({ id: id })
                        }).done(function (result) {
                            if (result.code === 0) {
                                $tagTable.bootstrapTable('remove', {
                                    field: 'TTagId',
                                    values: [id]
                                });
                                showMsg('删除标签成功', showMsg.OK);
                            } else {
                                showMsg('服务器返回异常：' + result.msg, showMsg.ERROR, true);
                            }
                        }).fail(function () {
                            showMsg('网络连接异常', showMsg.ERROR);
                        });
                    }
                });

                avalon.scan();
                var tableTemplate = {
                    ICON: '<img src="' + Action.sourceClassify + '${0}" alt="" class="blog-other-icon"/>',
                    CLASSIFYOPERATOR: '<a class="btn btn-info fa fa-edit data-edit" href="javascript:;" data-id="${id}"  data-index="${index}" data-icon="${img}" data-name="${name}" title="编辑"></a>\
                               <a class="btn btn-danger fa fa-trash-o data-delete" href="javascript:;" data-id="${id}" data-name="${name}" title="删除"></a>',
                    DELETE: '您确定要删除${0}[ <span style="color:red;font-weight:bold;">${1}</span> ]么？',
                    TAGOPERATOR: '<a class="btn btn-info fa fa-edit data-edit" href="javascript:;" data-id="${id}" data-index="${index}" data-name="${name}" title="编辑"></a><a class="btn btn-danger fa fa-trash-o data-delete" href="javascript:;" data-id="${id}" data-name="${name}" title="删除"></a>'
                },
                    //分类
                    $classifyTable = $(vmClassify.elem.table).bootstrapTable({
                        columns: [
                            { field: 'ClassifyId', title: 'ID', visible: false, },
                            { field: 'CName', title: '名称', align: 'left', valign: 'bottom', sortable: true },
                            {
                                field: 'CIcon', title: 'Icon', align: 'left', valign: 'bottom', 'class': 'td-img', formatter: function (value) {
                                    return so.format(tableTemplate.ICON, value);
                                }
                            },
                            {
                                field: 'ClassifyId', title: '操作', align: 'center', valign: 'bottom', formatter: function (value, row, index) {
                                    return so.format(tableTemplate.CLASSIFYOPERATOR, {
                                        id: value,
                                        index: index,
                                        img: row.CIcon,
                                        name: row.CName
                                    });
                                }
                            }],
                        data: PageDatas.classify
                    }).on('click', '.data-edit', function (e) {
                        var data = this.dataset;
                        vmClassify.set(data.icon, data.name, data.id, +data.index);
                        vmClassify.elem.input.focus();
                        vmClassify.elem.input.select();
                        //vmClassify.elem.input.setSelectionRange(0, 1000)
                    }).on('click', '.data-delete', function (e) {
                        var data = this.dataset;
                        dialog(so.format(tableTemplate.DELETE, '分类', data.name)).on(function () {
                            vmClassify.del(data.id);
                        }).show();
                    }),
                    //标签
                    $tagTable = $(vmTag.elem.table).bootstrapTable({
                        columns: [
                        { field: 'TTagId', title: 'ID', visible: false, },
                        {
                            field: 'TTagName',
                            title: '名称',
                            align: 'left',
                            sortable: true
                        },
                        {
                            field: 'TTagId',
                            title: '操作',
                            align: 'center',
                            formatter: function (value, row, index) {
                                return so.format(tableTemplate.TAGOPERATOR, {
                                    id: value,
                                    index: index,
                                    name: row.TTagName
                                });
                            }
                        }],
                        data: PageDatas.tags
                    }).on('click', '.data-edit', function (e) {
                        var data = this.dataset;
                        vmTag.set(data.name, data.id, +data.index);
                        vmTag.elem.input.focus();
                        vmTag.elem.input.select();
                    }).on('click', '.data-delete', function (e) {
                        var data = this.dataset;
                        dialog(so.format(tableTemplate.DELETE, '标签', data.name)).on(function () {
                            vmTag.del(data.id);
                        }).show();
                    })
            });
        });
    </script>
}
