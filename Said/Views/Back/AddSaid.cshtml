@model Said.Models.Article
@{
    Layout = "~/Views/Shared/_LayoutBack.cshtml";
}

<div class="page-header">
    <h2>添加Said&nbsp;&nbsp;<small>&gt;添加一篇Said</small></h2>
</div>
<ol class="breadcrumb">
    <li><a href="#">Home</a></li>
    <li><a href="#">Siad管理</a></li>
    <li class="active">添加Said</li>
</ol>
<div class="main-context">
    <div class="modal fade" id="upStates">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal"><span aria-hidden="true">&times;</span><span class="sr-only">Close</span></button>
                    <h4 class="modal-title">Modal title</h4>
                </div>
                <div class="modal-body">
                    <p>One fine body&hellip;</p>
                </div>
            </div>
        </div>
    </div>
    @using (Html.BeginForm("AddSaid", "Back", FormMethod.Post, new { spellcheck = "spellcheck", name = "saidForm", novalidate = "novalidate", OnSubmit = "return false;" }))
    {
        <div class="said-article">
            <div class="said-title-con">
                @Html.TextBoxFor(Model => Model.STitle, new Dictionary<string, object>() { { "class", "said-title" }, { "autocomplete", "off" }, { "placeholder", "文章标题" }, { "required", "" }, { "data-validate", "" }, { "data-check", "said.error" } })
            </div>
            <div class="said-context-content">
                <!-- said-error-->
                @Html.TextAreaFor(Model => Model.SContext, new Dictionary<string, object>() { { "class", "said-context" }, { "autocomplete", "off" }, { "placeholder", "这中间有个said的水印图啊，在bootstrap见过一个【缩略语】的排版，非常奈斯啊啊！！！！" }, { "required", "" }, { "data-validate", "" }, { "data-check", "said.error" } })
            </div>
        </div>
        <div class="row said-view-container">
            <div class="col-md-6">
                <div class="panel panel-default relative-container">
                    @*  <div class="said-mask" id="uploadSong">
                        <span>上传歌曲</span>
                        <div class="progress">
                            <div style="width: 0;" aria-valuemax="100" aria-valuemin="0" aria-valuenow="20" role="progressbar" class="progress-bar progress-bar-info"></div>
                        </div>
                        @Html.TextBoxFor(Model => Model.Song.SongId, new { @class = "hidden-file", type = "file" })
                    </div>*@
                    <div class="panel-heading">歌曲</div>
                    <div class="panel-body" id="songModel">
                        <div class="afterClear">
                            <div class="col-md-4">
                                <div class="music-img">
                                    <div class="thumbnail">
                                        @Html.TextBoxFor(Model => Model.Song.SongId, new { @class = "song-imgUp", type = "file" })
                                        <img src="../../Content/Images/UEDImg/demo-img6.jpg" id="songImg" />
                                    </div>
                                </div>
                            </div>
                            <div class="music-info col-md-8">
                                <div class="input-group">
                                    <span class="input-group-addon">歌曲</span>
                                    <div class="queryInputBar">
                                        @Html.TextBoxFor(Model => Model.Song.SongName, new Dictionary<string, object>() { { "class", "form-control music-input" }, { "autocomplete", "off" }, { "placeholder", "歌曲名称" }, { "required", "" }, { "data-validate", "" }, { "data-check", "said.query" } })
                                    </div>
                                </div>
                                <div class="input-group">
                                    <span class="input-group-addon">专辑</span>
                                    @Html.TextBoxFor(Model => Model.Song.SongAlbum, new { @class = "form-control music-input", placeholder = "歌曲专辑", autocomplete = "off", required = "required", validate = "" })
                                </div>
                                <div class="input-group">
                                    <span class="input-group-addon">歌手</span>
                                    @Html.TextBoxFor(Model => Model.Song.SongArtist, new { @class = "form-control music-input", placeholder = "艺术家", autocomplete = "off"/*, required = "required", validate = ""*/ })
                                </div>
                                <div class="input-group" data-ng-class="has-error">
                                    <span class="input-group-addon">文件</span>
                                    @Html.TextBoxFor(Model => Model.Song.SongFileName, new { @class = "form-control music-input", placeholder = "文件名", autocomplete = "off"/*, required = "required", validate = ""*/ })
                                </div>
                                <button type="button" class="btn btn-danger deleteSong" id="songDelete" data-ng-click="ac.deleteImg()">删除</button>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="panel panel-default relative-container">
                    <div class="said-mask" id="uploadImg">
                        <span>上传缩略图</span>
                        <div class="progress">
                            <div style="width: 0;" aria-valuemax="100" aria-valuemin="0" aria-valuenow="20" role="progressbar" class="progress-bar progress-bar-info"></div>
                        </div>
                        @Html.TextBoxFor(Model => Model.SImg, new { @class = "hidden-file", type = "file" })
                    </div>
                    <div class="panel-heading">描述</div>
                    <div class="panel-body">
                        <div class="col-md-4">
                            <div class="music-img">
                                <div class="thumbnail">
                                    <img src="../../Content/Images/test-said-img.jpg" id="summaryImg" />
                                </div>
                            </div>
                        </div>
                        <div class="col-md-8">
                            @Html.TextAreaFor(Model => Model.SSummary, new Dictionary<string, object>() { { "class", "said-dis" }, { "autocomplete", "off" }, { "placeholder", "简介[支持HTML]" }, { "required", "" }, { "data-validate", "" }, { "data-check", "said.error" } })
                            <button type="button" class="btn btn-danger deleteSong" id="summaryImgDelete">删除</button>
                        </div>

                    </div>
                </div>
            </div>
            <div class="col-md-6">
                <div class="panel panel-default">
                    <div class="panel-heading">附加信息</div>
                    <div class="panel-body">
                        <div class="input-group">
                            <span class="input-group-addon">标签</span>
                            <div class="queryInputBar tagInputBar form-control">
                                <div class="tag-selected"></div>
                                @Html.TextBoxFor(Model => Model.STag, new Dictionary<string, object>() { { "class", "tag-input" }, { "autocomplete", "off" }, { "placeholder", "标签，支持[、,.]分隔" }, { "required", "" } })
                            </div>
                        </div>
                        <div class="input-group">
                            <span class="input-group-addon">分类</span>
                            <div class="queryInputBar">
                                @Html.TextBoxFor(Model => Model.Classify.CName, new Dictionary<string, object>() { { "class", "form-control" }, { "autocomplete", "off" }, { "placeholder", "分类名称" }, { "required", "" }, { "data-validate", "" }, { "data-check", "said.query" } })
                            </div>
                        </div>
                    </div>
                    <div class="panel-heading panel-subTitle">可选信息</div>
                    <div class="panel-body">
                        <div class="input-group">
                            <span class="input-group-addon">文件</span>
                            @Html.TextBoxFor(Model => Model.SName, new { @class = "form-control", placeholder = "文章发布的（文件）名称", autocomplete = "off" })
                        </div>
                        <div class="form-group">
                            <label>JavaScript</label>
                            @Html.TextAreaFor(Model => Model.SJS, new { @class = "form-control", placeholder = "自定义JavaScript", autocomplete = "off" })
                        </div>
                        <div class="form-group">
                            <label>CSS</label>
                            @Html.TextAreaFor(Model => Model.SCSS, new { @class = "form-control", placeholder = "自定义CSS", autocomplete = "off" })
                        </div>
                        <div class="checkbox">
                            <label>
                                @*@Html.CheckBoxFor(Model => Model.SReprint, new { @type = "checkbox" })如果是直接提交表单，则可以直接采用checkbox控件，会生成两个input，具体请查阅：http://www.cnblogs.com/freeliver54/archive/2013/05/10/3070384.html*@
                                @Html.TextBoxFor(Model => Model.SReprint, new { @type = "checkbox" })是否转载</label>
                            <label>
                                <input type="checkbox" />
                                @Html.TextBoxFor(Model => Model.SIsTop, new { @type = "checkbox" })
                            </label>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="submit-container">
            <div class="error-check" id="errorTip">
                发布前会进行错误检测
            </div>
            <button class="btn btn-lg said-submit center-block" id="submit" type="submit">发布</button>
            <!--data-ng-class="{'submit-lock':!saidForm.$valid}"-->
        </div>
    }
</div>
@section Css{
    <link href="@Url.Content("~/Content/Back/Style/addSaid.css")" rel="stylesheet" />
}
@*@section HeadJs{
    <script src="@Url.Content("")"></script>
}*@
@section FootJs{
    @*var Action = {
            song:@Url.Content("~/Source/Said/Song")
            img:@Url.Content("~/Source/Said/Img"),
            form:@Url.Action("AddSaid", "Back")
        };*@
    <script type="text/javascript">
        var Action = {
            song: '/Source/SaidSong',
            img: '@Url.Action("UploadSaidImg", "Source")',
            imgLocation: '@Url.Content("~/Source/Said/")',
            form: '@Url.Action("AddSaid", "Back")'
        },
        DataCenter = {
            songs: {
                'Flying Without Wings': 'flyingfwwwestlife西城男孩',
                'Home': 'homewestlife西城男孩',
                'Yellow': 'Yellowcoldplay酷玩乐队',
                'You Raise Me Up': 'yourraisemeupyouraisemeupwestlife西城男孩西域男孩'
            },
            songsData: {
                'Flying Without Wings': {
                    id: '1',
                    name: 'Flying Without Wings',
                    album: 'Face To Face',
                    artist: 'Westlife',
                    fileName: 'fww.mp3',
                    img: '/Content/Images/UEDImg/demoImg2.jpg'//注意这个路径应该只是个图片名称
                },
                'Home': {
                    id: '2',
                    name: 'Home',
                    album: 'Home',
                    artist: 'Westlife',
                    fileName: 'home-westlife.mp3',
                    img: '/Content/Images/testImg-Paramore.Ps.jpg'
                },
                'Yellow': {
                    id: '3',
                    name: 'Yellow',
                    album: 'Yellow',
                    artist: 'Coldplay 酷玩',
                    fileName: 'yellow.mp3',
                    img: '/Content/Images/UEDImg/demoImg3.jpg'
                },
                'You Raise Me Up': {
                    id: '1',
                    name: 'You Raise Me Up',
                    album: 'Westlife - The Lovesongs',
                    artist: 'WestLife',
                    fileName: 'yrmu.mp3',
                    img: '/Content/Images/UEDImg/demo-img6.jpg'
                }
            },
            tags: ['javascript',
                          'ECMAScript',
                          'C#',
                          '.NET',
                          'jQuery',
                          '.NET MVC',
                          'Sql Server',
                          'NodeJS',
                          'Zepto', 'requireJS', 'angularJS', 'Backbone', 'linkFly', 'bootstrap'],
            classif: ['听说', 'linkFly', 'blog', '学习'],
            //MIME参考：http://www.w3school.com.cn/media/media_mimeref.asp
            imgFilters: ['jpg', 'jpeg', 'jpe', 'bmp', 'png', 'gif'/*, 'image/png', 'image/bmp', 'image/gif', 'image/jpeg'*/]
        };

        require(['jquery', 'so/so', 'so/plug/search', 'so/plug/validate', 'so/plug/model', 'said/addSaid'], function ($, so, search, validate, saidModel, addSaid) {
            $(function () {
                var _ = function (name) {
                    return document.getElementById(name);
                };
                // => form验证
                var checkFns = {
                    'said.error': function (elem, checked/*, key, value, pattern*/) {
                        checked ? elem.classList.remove('said-error') : elem.classList.add('said-error');
                    },
                    'said.query': function (elem, checked/*, key, value, pattern*/) {
                        checked ? elem.parentNode.parentNode.classList.remove('has-error') : elem.parentNode.parentNode.classList.add('has-error');
                    }
                },
                temp,
                trim = String.prototype.trim,
                each = Array.prototype.forEach,
                validateData = function (elem, checked, key, value, pattern) {
                    if (temp = checkFns[elem.dataset.check]) //特殊的样式改变
                        temp(elem, checked, key, value, pattern);
                    else//正常的样式改变
                        checked ? elem.parentNode.classList.remove('has-error') : elem.parentNode.classList.add('has-error');
                },
                formValidate = validate(window.saidForm, function (elem, checked, key, value, pattern) {  // => validate插件
                    validateData(elem, checked, key, value, pattern);
                }),
                validateProgress = function () { //表单验证进度
                    var length = formValidate.keys.length, index = 1, txt = _('errorTip'), progress = _('errorProgress');
                    return {
                        run: function (value) {
                            if (value != null)
                                index = value;
                            progress.style.width = (index++ / length * 100) + '%';
                            txt.innerHTML = index > length ? '检测完毕，重新检测请再次点击' : '检测中';
                        },
                        reset: function () {
                            index = 1;
                            progress.style.width = '0%';
                            txt.innerHTML = '点击进行错误检测';
                        },
                        toggleClass: function (className) {
                            progress.className = className;
                        },
                        state: function () {
                            return index === 1 ? false : true;
                        }
                    }
                }();

                //页面弹窗：
                var dialog = function (model) {
                    var titleElem = model.find('.modal-title')[0],
                        body = model.find('.modal-body')[0];
                    return function (title, context) {
                        if (title != null)
                            titleElem.innerHTML = title;
                        if (context != null)
                            body.innerHTML = context;
                        return model.modal('show');
                    };

                }($('#upStates'));

                // => 页面交互元素 => Model插件
                var model = saidModel(window.saidForm),//根据表单构建表单Model，源于so.model
                    submitBtn = _('submit');


                var TagSelect = function (elem, data, def) {
                    // => tag的选择需要针对search插件进行组合
                    var templent = '<label><span>${0}</span><a href="javascript:;" class="_tag-selectItem">×</a></label>',
                        value = [],
                        parentNode = elem.parentNode.parentNode,
                        format = so.format,
                        content = elem.previousElementSibling,//生成标签的容器
                        tmp,//临时使用变量
                        insertTag = function (name) {
                            //创建一个tag
                            if (!name || value.indexOf(name) !== -1) return false;
                            content.insertAdjacentHTML('beforeEnd', format(templent, name));
                            value.push(name);
                            return true;
                        },
                        checkState = function () {
                            return value.length === 0 ?
                                (parentNode.classList.add('has-error'), false) :
                                (parentNode.classList.remove('has-error'), true);
                        };
                    if (Array.isArray(def)) {
                        //有默认值则处理默认值
                        var html = [];
                        def.forEach(function (value) {
                            html.push(so.format(templent, value));
                        });
                        content.innerHTML = html.join('');
                        each.call(content.children, function (elem, i) {
                            value.push(elem.innerHTML);
                        });
                        html = null;
                    }
                    content.addEventListener('click', function (e) {
                        //删除标签
                        if (e.target.className === '_tag-selectItem') {
                            tmp = e.target.previousElementSibling;
                            value.splice(value.indexOf(tmp.innerHTML), 1);
                            tmp.parentNode.remove();//js什么时候有了remove()方法？？
                        }
                    });
                    elem.addEventListener('keydown', function (e) {
                        switch (e.keyCode) {
                            case 9://tab
                                //case 32://空格
                            case 188://,
                            case 190://.
                                //case 9 | 32 | 188 | 190:
                                //位枚举学的不好啊 囧....
                                if (trim.call(elem.value) === '') {
                                    checkState();
                                    return;
                                };
                                e.preventDefault();
                                insertTag(elem.value);
                                checkState();
                                elem.value = '';
                                break;
                            case 8://backSpace
                                //case 46://delete
                                if (value.length && trim.call(elem.value) === '') {
                                    value.pop();
                                    content.lastElementChild.remove();
                                    checkState();
                                }
                                break;
                            default:
                                break;
                        }
                    });
                    search(elem, data, function (inputValue, selectValue) {
                        insertTag(selectValue);
                        checkState();
                        return '';
                    }, function () {
                        checkState();
                    })
                    return {
                        check: function () {
                            //检测是否错误，返回检测结果，同时修改样式
                            return checkState();
                        },
                        checked: function () {
                            //检测错误
                            return value.length !== 0;
                        },
                        val: function () {
                            //获取选中项的值
                            return value;
                        }
                    };
                }(model.get('STag'), DataCenter.tags, ['javascript']);

                //分类直接采用search
                search(model.get('Classify.CName'), DataCenter.classif, {
                    def: '没有检索到相关信息',
                    callback: function (inputValue, selectValue) {
                        //分类的选择相对简单
                        return selectValue;
                    }
                });


                // => 构建歌曲模型
                //{mask:蒙板DOM,img:Img存放DOM, del:删除按钮, songs:歌曲,models：模型对象, model:初始化模型对象}
                var uploadErrorHandle = function (error, data) {
                    switch (error.code) {
                        case 1:
                        case 2:
                        case 4:
                            dialog('上传异常', error.msg);
                            break;
                        case 3:
                        default:
                            dialog('服务器异常', '服务器响应异常');
                            break;
                    }
                },
                // =-> 歌曲上传
                Song = function (mask, img, del, action, filters, songs, models, model) {
                    var upload = addSaid.Upload(mask, action, filters, function (data) {
                        if (data.error === 0) {//ok
                            img.src = Action.imgLocation + (imgName = data.name);
                        } else {
                            console.log(data.msg);
                        }
                    }, uploadErrorHandle),
                        imgName,//上传或suggestion选中项的图片名称
                        tmpModel,//suggestion选中项的model
                        selectData = false,
                        searchDOM = model.get('Song.SongName');//选中项id，如果为false则表示不是选中项的数据
                    //songName的search()suggestion事件绑定之前绑定
                    ['Song.SongName', 'Song.SongAlbum', 'Song.SongArtist', 'Song.SongFileName'].forEach(function (name) {
                        model.get(name).addEventListener('input', function () {
                            validateData(this, !!this.value.trim());
                            selectData = false;//编辑过表示不是选中项
                            //是不是这里不清空selectData，让服务器对比数据，如果有改动则插入，否则还是直接引用
                        });
                    });
                    var songName = search(searchDOM, songs, function (inputValue, value) {
                        validateData(searchDOM, !!searchDOM.value.trim());
                        tmpModel = models[value];
                        model['Song.SongName'] = tmpModel.name;//直接赋值即可映射到DOM
                        model['Song.SongAlbum'] = tmpModel.album;
                        model['Song.SongArtist'] = tmpModel.artist;
                        model['Song.SongFileName'] = tmpModel.fileName;
                        img.src = imgName = tmpModel.img;//保存选中的图片信息
                        selectData = tmpModel.id;//获取选中项id
                        upload.toggle(true);
                        return value;
                    }, function () {
                        selectData = false;
                    }),
                      reset = function () {
                          model['Song.SongName'] = model['Song.SongAlbum'] = model['Song.SongArtist'] = model['Song.SongFileName'] = '';
                          img.src = "../../Content/Images/UEDImg/demo-img6.jpg";
                          tmpModel = imgName = false;
                          upload.toggle();
                      };
                    del.addEventListener('click', function () {
                        reset();
                    });
                    return {
                        img: function () {
                            return imgName;
                        },
                        check: function () {
                            //没有选择项，也没有上传图片
                            return imgName && selectData;
                        },
                        val: function () {
                            return { img: imgName, id: selectData };
                        },
                        reset: reset
                    };
                }('Song_SongId', _('songImg'), _('songDelete'), Action.img, DataCenter.imgFilters, DataCenter.songs, DataCenter.songsData, model);
                // => 缩略图
                SumImg = (function (mask, img, action, del, filters, def) {
                    var value,
                        reset = function () {
                            img.src = '../../Content/Images/test-said-img.jpg';
                            value = null;
                            upload.toggle();
                        },
                        upload = addSaid.Upload(mask, action, filters, function (data, state) {
                            //上传的value
                            if (data.error === 0) {//ok
                                img.src = Action.imgLocation + (value = data.name);
                            } else {
                                console.log(data.msg);
                            }
                        }, uploadErrorHandle);

                    del.addEventListener('click', reset);
                    if (def)
                        img.src = Action.imgLocation + (value = def);
                    return {
                        val: function () {
                            return value;
                        },
                        reset: reset
                    };
                })(_('uploadImg'), _('summaryImg'), Action.img, _('summaryImgDelete'), DataCenter.imgFilters);
                //发布


                changeState = function (logDOM) {
                    var lock = false, change = function (mothed, text) {
                        if (arguments.length === 2)
                            submitBtn.classList[mothed]('submit-lock');
                        submitBtn.innerHTML = text;
                    };
                    return function (state) {
                        switch (state) {
                            case 0://lock
                                lock = true;
                                change('add', '检测中');
                                break;
                            case 1://error
                                lock = false;
                                change('remove', '发布');
                                break;
                            case 2://submiting
                                change('提交中');
                                break;
                            case 3://success
                                lock = false;
                                change('remove', '发布');
                                break;
                            default:
                                return lock;
                                break;
                        }
                        return false;
                    }
                    submitBtn.innerHTML = text;
                }(_('errorTip'));
                //form提交
                submitBtn.addEventListener('click', function () {
                    //console.log(formValidate);
                    //console.log(model);
                    if (changeState()) return false;
                    changeState(0);
                    var checkResult = formValidate.test(function (elem, checked, key, value, pattern) {
                        //console.log(elem, checked, key, value, pattern);
                        validateData(elem, checked, key, value, pattern);
                    });
                    if (!checkResult) {
                        //检测完毕，如果有错误应该清空检测进度，需要调整
                        changeState(1);
                        return changeState(1);
                    } else {
                        //默认检测通过，检测特殊项：歌曲、缩略图和标签
                        if (!Song.check()) {
                            dialog('歌曲信息错误', '请上传歌曲图片或选择正确的歌曲信息');
                            return changeState(1);
                        }
                        //检测标签
                        if (!TagSelect.check()) {
                            errorLog(false);
                            return changeState(1);
                        }
                        //检测缩略图
                        if (!SumImg.val()) {
                            dialog('缩略图错误', '请上传正确的缩略图');
                            SumImg.reset();
                            return changeState(1);
                        }
                        //至此检测完毕===========================
                        changeState(2);
                        lock = true;
                        var data = new FormData(),//表单值
                            songData = Song.val();//歌曲值
                        model.each(function (name, value) {
                            data.append(name, value);
                        });

                        //【【【【【【【【【【【【【【【【【【【【【【【【【文章文件名、歌曲文件名要进行异步检测】】】】】】】】】】】】】】】】】】】】】】】】】】】】
                        //缩略图
                        data.append('SImg', SumImg.val());
                        //标签
                        data.append('STag', SumImg.val());
                        //data.SHTML = '';
                        if (songData.id) {
                            //选择了歌曲，而不是新增歌曲
                            data.append('Song.SSongId', songData.id);
                        } else if (songData.img) {
                            //上传||suggestion选择了图片后，编辑了歌曲
                            data.append('Song.SongImg', songData.img);
                        }
                        addSaid.submit(data, Action.form, function (data, xhr) {

                        }, function () {
                            alert('发送信息失败');
                        });
                    }
                });
            });
        });
    </script>
}
